# yaml-language-server: $schema=https://raw.githubusercontent.com/grafana/cog/main/schemas/veneers.json

language: all

package: dashboard

builders:
  ##############
  # Dashboards #
  ##############

  # We don't want these builders at all
  - omit: { by_object: GridPos }
  - omit: { by_object: DataSourceRef }
  - omit: { by_object: LibraryPanelRef }
  - omit: { by_object: VariableOption }
  - omit: { by_object: Threshold }
  - omit: { by_object: ValueMappingResult }
  - omit: { by_object: ValueMap }
  - omit: { by_object: RangeMap }
  - omit: { by_object: RegexMap }
  - omit: { by_object: SpecialValueMap }
  # overrides and transformations related
  - omit: { by_object: MatcherConfig }
  - omit: { by_object: DynamicConfigValue }
  - omit: { by_object: DataTransformerConfig }

  #######################
  # Overrides shortcuts #
  #######################

  # byName
  - add_option:
      by_object: FieldConfigSource
      option:
        name: overrideByName
        comments:
          - Adds override rules for a specific field, referred to by its name.
        arguments:
          - name: name
            type: &type_string
              kind: scalar
              scalar: {scalar_kind: string}
          - name: properties
            type: &type_DynamicConfigValue_array
              kind: array
              array: {value_type: {kind: ref, ref: {referred_pkg: dashboard, referred_type: DynamicConfigValue}}}
        assignments:
          - method: append
            path: overrides
            value:
              envelope:
                values:
                  # Matcher
                  - field: matcher
                    value:
                      envelope:
                        values:
                          - field: id
                            value: {constant: byName}
                          - field: options
                            value: {argument: {name: name, type: *type_string}}
                  # Properties
                  - field: properties
                    value:
                      argument: { name: properties, type: *type_DynamicConfigValue_array }

  # byRegexp
  - add_option:
      by_object: FieldConfigSource
      option:
        name: overrideByRegexp
        comments:
          - Adds override rules for the fields whose name match the given regexp.
        arguments:
          - name: regexp
            type: *type_string
          - name: properties
            type: *type_DynamicConfigValue_array
        assignments:
          - method: append
            path: overrides
            value:
              envelope:
                values:
                  # Matcher
                  - field: matcher
                    value:
                      envelope:
                        values:
                          - field: id
                            value: {constant: byRegexp}
                          - field: options
                            value: {argument: {name: regexp, type: *type_string}}
                  # Properties
                  - field: properties
                    value:
                      argument: {name: properties, type: *type_DynamicConfigValue_array}

  # byType
  - add_option:
      by_object: FieldConfigSource
      option:
        name: overrideByFieldType
        comments:
          - Adds override rules for all the fields of the given type.
        arguments:
          - name: fieldType
            type: *type_string
          - name: properties
            type: *type_DynamicConfigValue_array
        assignments:
          - method: append
            path: overrides
            value:
              envelope:
                values:
                  # Matcher
                  - field: matcher
                    value:
                      envelope:
                        values:
                          - field: id
                            value: {constant: byType}
                          - field: options
                            value: {argument: {name: fieldType, type: *type_string}}
                  # Properties
                  - field: properties
                    value:
                      argument: {name: properties, type: *type_DynamicConfigValue_array}

  # byFrameRefID
  - add_option:
      by_object: FieldConfigSource
      option:
        name: overrideByQuery
        arguments:
          - name: queryRefId
            type: *type_string
          - name: properties
            type: *type_DynamicConfigValue_array
        assignments:
          - method: append
            path: overrides
            value:
              envelope:
                values:
                  # Matcher
                  - field: matcher
                    value:
                      envelope:
                        values:
                          - field: id
                            value: {constant: byFrameRefID}
                          - field: options
                            value: {argument: {name: queryRefId, type: *type_string}}
                  # Properties
                  - field: properties
                    value:
                      argument: {name: properties, type: *type_DynamicConfigValue_array}

  # RowPanel → Row
  - rename:
      by_object: RowPanel
      as: Row

  # TimePickerConfig → TimePicker
  - rename:
      by_name: TimePickerConfig
      as: TimePicker

  - properties:
      by_object: Dashboard
      set:
        - name: currentY
          type:
            kind: scalar
            scalar: {scalar_kind: uint32}
        - name: currentX
          type:
            kind: scalar
            scalar: {scalar_kind: uint32}
        - name: lastPanelHeight
          type:
            kind: scalar
            scalar: {scalar_kind: uint32}

  # Rearrange things a bit
  - merge_into:
      source: FieldConfig
      destination: Panel
      under_path: fieldConfig.defaults
      exclude_options: [
        # don't copy these over as they clash with a similarly named options from Panel
        "description",

        # TODO: check if these are actually relevant
        "displayNameFromDS", "filterable", "path", "writeable"
      ]
      rename_options:
        color: colorScheme
        links: dataLinks
  - merge_into:
      source: FieldConfigSource
      destination: Panel
      under_path: fieldConfig

  # Panels composability
  - compose:
      by_variant: panelcfg
      source_builder_name: dashboard.Panel
      plugin_discriminator_field: type
      composition_map:
        Options: options
        FieldConfig: fieldConfig.defaults.custom
      exclude_options: [
        # merged with another builder
        "defaults",
        "fieldConfig",
        # not needed anymore since we're defining these the composition map
        "options",
        "custom",
        # TODO: check if it's relevant or not
        "pluginVersion",
        "repeatPanelId",
        "tags",
      ]

  # remove builders that were previously merged into something else
  - omit: { by_object: FieldConfig }
  - omit: { by_object: FieldConfigSource }

  # Not needed
  - omit: { by_object: AnnotationContainer }

  # No need for builders for structs generated from a disjunction
  - omit: { generated_from_disjunction: true }

  ################
  # Constructors #
  ################
  - promote_options_to_constructor:
      by_object: Dashboard
      options: [title]

  - promote_options_to_constructor:
      by_object: RowPanel
      options: [title]

  - promote_options_to_constructor:
      by_object: DashboardLink
      options: [title]

options:
  ##############
  # Dashboards #
  ##############

  # `Tooltip` looks better than `GraphTooltip`
  - rename:
      by_name: Dashboard.graphTooltip
      as: tooltip

  # Editable() + Readonly() instead of Editable(val bool)
  - unfold_boolean:
      by_name: Dashboard.editable
      true_as: editable
      false_as: readonly

  # Refresh(string) instead of Refresh(struct StringOrBool)
  - struct_fields_as_arguments:
      by_name: Dashboard.refresh
      fields: [String]

  # Append a single `link` value instead of a list of everything
  - duplicate:
      by_name: Dashboard.links
      as: link
  - array_to_append:
      by_name: Dashboard.link

  # annotations([]AnnotationQuery) instead of annotations(AnnotationContainer)
  - struct_fields_as_arguments:
      by_name: Dashboard.annotations
  # annotations(annotations) instead of annotations(list)
  - rename_arguments:
      by_name: Dashboard.annotations
      as: [annotations]

  # Append a single `annotation` value instead of a list of everything
  - duplicate:
      by_name: Dashboard.annotations
      as: annotation
  - array_to_append:
      by_name: Dashboard.annotation

  # Append a single `panel|row` value instead of a list of everything
  - array_to_append:
      by_name: Dashboard.panels
  # Panel(...) and RowPanel(...) instead of panels(...(Panel|RowPanel))
  - disjunction_as_options:
      by_name: Dashboard.panels
  # Panel() to WithPanel()
  - rename:
      by_name: Dashboard.panel
      as: withPanel
  # RowPanel() to WithRow()
  - rename:
      by_name: Dashboard.rowPanel
      as: withRow

  # Append a single `panel` value instead of a list of everything
  - array_to_append:
      by_name: RowPanel.panels
  # Panels() to WithPanel()
  - rename:
      by_name: RowPanel.panels
      as: withPanel

  # Panels added directly to a row will be stripped by Grafana unless the row is collapsed.
  - add_assignment:
      by_name: RowPanel.withPanel
      assignment:
        path: collapsed
        method: direct
        value: { constant: true }
  - add_comments:
      by_name: RowPanel.withPanel
      comments:
        - 'Note: since panels added directly to a row will be stripped by Grafana unless the row is collapsed,'
        - 'this option will set the current row as collapsed.'
  - add_comments:
      by_name: RowPanel.collapsed
      comments:
        - 'Note: panels added directly to a row will be stripped by Grafana unless the row is collapsed'

  # Templating([]VariableModel) instead of Templating(struct []struct{List []VariableModel})
  - struct_fields_as_arguments:
      by_name: Dashboard.templating
      fields: [list]
  # Templating(variables) instead of Templating(list)
  - rename_arguments:
      by_name: Dashboard.templating
      as: [variables]
  # Append a single variable instead forcing to define every variable at once
  - duplicate:
      by_name: Dashboard.templating
      as: withVariable
  - array_to_append:
      by_name: Dashboard.withVariable
  # Templating() to Variables()
  - rename:
      by_name: Dashboard.templating
      as: variables

  # We don't want these options at all
  - omit: { by_name: Dashboard.schemaVersion }

  ##############
  #   Panels   #
  ##############

  # Append a single target instead forcing to define all of them at once
  - duplicate:
      by_name: Panel.targets
      as: withTarget
  - array_to_append:
      by_name: Panel.withTarget

  # Append a single override instead forcing to define all of them at once
  - duplicate:
      by_name: Panel.overrides
      as: withOverride
  - array_to_append:
      by_name: Panel.withOverride

  # Append a single transformation instead forcing to define all of them at once
  - duplicate:
      by_name: Panel.transformations
      as: withTransformation
  - array_to_append:
      by_name: Panel.withTransformation

  # We want to offer both the ability to set gridPos entirely manually,
  # or to use span/height-based automatic layout
  - duplicate:
      by_name: Panel.gridPos
      as: tmpGridPos
  # W(), H() instead of explicit GridPos() definition
  - struct_fields_as_options:
      by_name: Panel.tmpGridPos
      fields: [w, h]
  # W() → Span()
  - rename:
      by_name: Panel.w
      as: span
  # H() → Height()
  - rename:
      by_name: Panel.h
      as: height

  ##############
  #  Snapshot  #
  ##############

  # These values are set by Grafana on snapshot creation/update
  - omit: { by_name: Snapshot.userId }
  - omit: { by_name: Snapshot.created }
  - omit: { by_name: Snapshot.updated }

