import * as cog from '../cog';
import * as dashboard from '../dashboard';
import * as common from '../common';
export declare class PanelBuilder implements cog.Builder<dashboard.Panel> {
    private readonly internal;
    constructor();
    build(): dashboard.Panel;
    id(id: number): this;
    withTarget(targets: cog.Builder<cog.Dataquery>): this;
    title(title: string): this;
    description(description: string): this;
    transparent(transparent: boolean): this;
    datasource(datasource: dashboard.DataSourceRef): this;
    height(h: number): this;
    span(w: number): this;
    links(links: cog.Builder<dashboard.DashboardLink>[]): this;
    repeat(repeat: string): this;
    repeatDirection(repeatDirection: "h" | "v"): this;
    maxPerRow(maxPerRow: number): this;
    maxDataPoints(maxDataPoints: number): this;
    withTransformation(transformations: dashboard.DataTransformerConfig): this;
    interval(interval: string): this;
    timeFrom(timeFrom: string): this;
    timeShift(timeShift: string): this;
    hideTimeOverride(hideTimeOverride: boolean): this;
    libraryPanel(libraryPanel: dashboard.LibraryPanelRef): this;
    cacheTimeout(cacheTimeout: string): this;
    queryCachingTTL(queryCachingTTL: number): this;
    displayName(displayName: string): this;
    unit(unit: string): this;
    decimals(decimals: number): this;
    min(min: number): this;
    max(max: number): this;
    mappings(mappings: dashboard.ValueMapping[]): this;
    thresholds(thresholds: cog.Builder<dashboard.ThresholdsConfig>): this;
    noValue(noValue: string): this;
    withOverride(overrides: {
        matcher: dashboard.MatcherConfig;
        properties: dashboard.DynamicConfigValue[];
    }): this;
    legend(legend: cog.Builder<common.VizLegendOptions>): this;
    tooltip(tooltip: cog.Builder<common.VizTooltipOptions>): this;
    xField(xField: string): this;
    drawStyle(drawStyle: common.GraphDrawStyle): this;
    gradientMode(gradientMode: common.GraphGradientMode): this;
    thresholdsStyle(thresholdsStyle: cog.Builder<common.GraphThresholdsStyleConfig>): this;
    lineColor(lineColor: string): this;
    lineWidth(lineWidth: number): this;
    lineInterpolation(lineInterpolation: common.LineInterpolation): this;
    lineStyle(lineStyle: cog.Builder<common.LineStyle>): this;
    fillColor(fillColor: string): this;
    fillOpacity(fillOpacity: number): this;
    showPoints(showPoints: common.VisibilityMode): this;
    pointSize(pointSize: number): this;
    pointColor(pointColor: string): this;
    axisPlacement(axisPlacement: common.AxisPlacement): this;
    axisColorMode(axisColorMode: common.AxisColorMode): this;
    axisLabel(axisLabel: string): this;
    axisWidth(axisWidth: number): this;
    axisSoftMin(axisSoftMin: number): this;
    axisSoftMax(axisSoftMax: number): this;
    axisGridShow(axisGridShow: boolean): this;
    scaleDistribution(scaleDistribution: cog.Builder<common.ScaleDistributionConfig>): this;
    axisCenteredZero(axisCenteredZero: boolean): this;
    barAlignment(barAlignment: common.BarAlignment): this;
    barWidthFactor(barWidthFactor: number): this;
    stacking(stacking: cog.Builder<common.StackingConfig>): this;
    hideFrom(hideFrom: cog.Builder<common.HideSeriesConfig>): this;
    transform(transform: common.GraphTransform): this;
    spanNulls(spanNulls: boolean | number): this;
    fillBelowTo(fillBelowTo: string): this;
    pointSymbol(pointSymbol: string): this;
    axisBorderShow(axisBorderShow: boolean): this;
    barMaxWidth(barMaxWidth: number): this;
}
