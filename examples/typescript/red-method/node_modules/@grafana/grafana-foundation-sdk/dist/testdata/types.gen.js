"use strict";
// Code generated - EDITING IS FUTILE. DO NOT EDIT.
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultKey = exports.defaultDataquery = exports.defaultScenario = exports.defaultCSVWave = exports.defaultUSAQuery = exports.defaultNodesQuery = exports.defaultSimulationQuery = exports.defaultPulseWaveQuery = exports.defaultStreamingQuery = exports.defaultTestDataQueryType = exports.TestDataQueryType = void 0;
var TestDataQueryType;
(function (TestDataQueryType) {
    TestDataQueryType["RandomWalk"] = "random_walk";
    TestDataQueryType["SlowQuery"] = "slow_query";
    TestDataQueryType["RandomWalkWithError"] = "random_walk_with_error";
    TestDataQueryType["RandomWalkTable"] = "random_walk_table";
    TestDataQueryType["ExponentialHeatmapBucketData"] = "exponential_heatmap_bucket_data";
    TestDataQueryType["LinearHeatmapBucketData"] = "linear_heatmap_bucket_data";
    TestDataQueryType["NoDataPoints"] = "no_data_points";
    TestDataQueryType["DataPointsOutsideRange"] = "datapoints_outside_range";
    TestDataQueryType["CSVMetricValues"] = "csv_metric_values";
    TestDataQueryType["PredictablePulse"] = "predictable_pulse";
    TestDataQueryType["PredictableCSVWave"] = "predictable_csv_wave";
    TestDataQueryType["StreamingClient"] = "streaming_client";
    TestDataQueryType["Simulation"] = "simulation";
    TestDataQueryType["USA"] = "usa";
    TestDataQueryType["Live"] = "live";
    TestDataQueryType["GrafanaAPI"] = "grafana_api";
    TestDataQueryType["Arrow"] = "arrow";
    TestDataQueryType["Annotations"] = "annotations";
    TestDataQueryType["TableStatic"] = "table_static";
    TestDataQueryType["ServerError500"] = "server_error_500";
    TestDataQueryType["Logs"] = "logs";
    TestDataQueryType["NodeGraph"] = "node_graph";
    TestDataQueryType["FlameGraph"] = "flame_graph";
    TestDataQueryType["RawFrame"] = "raw_frame";
    TestDataQueryType["CSVFile"] = "csv_file";
    TestDataQueryType["CSVContent"] = "csv_content";
    TestDataQueryType["Trace"] = "trace";
    TestDataQueryType["ManualEntry"] = "manual_entry";
    TestDataQueryType["VariablesQuery"] = "variables-query";
})(TestDataQueryType || (exports.TestDataQueryType = TestDataQueryType = {}));
const defaultTestDataQueryType = () => (TestDataQueryType.RandomWalk);
exports.defaultTestDataQueryType = defaultTestDataQueryType;
const defaultStreamingQuery = () => ({
    type: "signal",
    speed: 0,
    spread: 0,
    noise: 0,
});
exports.defaultStreamingQuery = defaultStreamingQuery;
const defaultPulseWaveQuery = () => ({});
exports.defaultPulseWaveQuery = defaultPulseWaveQuery;
const defaultSimulationQuery = () => ({
    key: (0, exports.defaultKey)(),
});
exports.defaultSimulationQuery = defaultSimulationQuery;
const defaultNodesQuery = () => ({});
exports.defaultNodesQuery = defaultNodesQuery;
const defaultUSAQuery = () => ({});
exports.defaultUSAQuery = defaultUSAQuery;
const defaultCSVWave = () => ({});
exports.defaultCSVWave = defaultCSVWave;
const defaultScenario = () => ({
    id: "",
    name: "",
    stringInput: "",
});
exports.defaultScenario = defaultScenario;
const defaultDataquery = () => ({
    scenarioId: TestDataQueryType.RandomWalk,
    _implementsDataqueryVariant: () => { },
});
exports.defaultDataquery = defaultDataquery;
const defaultKey = () => ({
    type: "",
    tick: 0,
});
exports.defaultKey = defaultKey;
//# sourceMappingURL=types.gen.js.map