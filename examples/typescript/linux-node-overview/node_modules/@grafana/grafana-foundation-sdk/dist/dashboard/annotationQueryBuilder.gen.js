"use strict";
// Code generated - EDITING IS FUTILE. DO NOT EDIT.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnnotationQueryBuilder = void 0;
const tslib_1 = require("tslib");
const dashboard = tslib_1.__importStar(require("../dashboard"));
// TODO docs
// FROM: AnnotationQuery in grafana-data/src/types/annotations.ts
class AnnotationQueryBuilder {
    constructor() {
        this.internal = dashboard.defaultAnnotationQuery();
    }
    build() {
        return this.internal;
    }
    // Name of annotation.
    name(name) {
        this.internal.name = name;
        return this;
    }
    // Datasource where the annotations data is
    datasource(datasource) {
        this.internal.datasource = datasource;
        return this;
    }
    // When enabled the annotation query is issued with every dashboard refresh
    enable(enable) {
        this.internal.enable = enable;
        return this;
    }
    // Annotation queries can be toggled on or off at the top of the dashboard.
    // When hide is true, the toggle is not shown in the dashboard.
    hide(hide) {
        this.internal.hide = hide;
        return this;
    }
    // Color to use for the annotation event markers
    iconColor(iconColor) {
        this.internal.iconColor = iconColor;
        return this;
    }
    // Filters to apply when fetching annotations
    filter(filter) {
        const filterResource = filter.build();
        this.internal.filter = filterResource;
        return this;
    }
    // TODO.. this should just be a normal query target
    target(target) {
        const targetResource = target.build();
        this.internal.target = targetResource;
        return this;
    }
    // TODO -- this should not exist here, it is based on the --grafana-- datasource
    type(type) {
        this.internal.type = type;
        return this;
    }
    // Set to 1 for the standard annotation query all dashboards have by default.
    builtIn(builtIn) {
        this.internal.builtIn = builtIn;
        return this;
    }
}
exports.AnnotationQueryBuilder = AnnotationQueryBuilder;
//# sourceMappingURL=annotationQueryBuilder.gen.js.map