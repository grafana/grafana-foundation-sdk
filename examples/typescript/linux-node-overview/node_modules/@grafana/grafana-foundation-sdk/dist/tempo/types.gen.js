"use strict";
// Code generated - EDITING IS FUTILE. DO NOT EDIT.
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultTraceqlFilter = exports.defaultTraceqlSearchScope = exports.TraceqlSearchScope = exports.defaultSearchTableType = exports.SearchTableType = exports.defaultSearchStreamingState = exports.SearchStreamingState = exports.defaultTempoQueryType = exports.TempoQueryType = exports.defaultTempoQuery = void 0;
const defaultTempoQuery = () => ({
    refId: "",
    filters: [],
    _implementsDataqueryVariant: () => { },
});
exports.defaultTempoQuery = defaultTempoQuery;
// search = Loki search, nativeSearch = Tempo search for backwards compatibility
var TempoQueryType;
(function (TempoQueryType) {
    TempoQueryType["Traceql"] = "traceql";
    TempoQueryType["TraceqlSearch"] = "traceqlSearch";
    TempoQueryType["Search"] = "search";
    TempoQueryType["ServiceMap"] = "serviceMap";
    TempoQueryType["Upload"] = "upload";
    TempoQueryType["NativeSearch"] = "nativeSearch";
    TempoQueryType["TraceId"] = "traceId";
    TempoQueryType["Clear"] = "clear";
})(TempoQueryType || (exports.TempoQueryType = TempoQueryType = {}));
const defaultTempoQueryType = () => (TempoQueryType.Traceql);
exports.defaultTempoQueryType = defaultTempoQueryType;
// The state of the TraceQL streaming search query
var SearchStreamingState;
(function (SearchStreamingState) {
    SearchStreamingState["Pending"] = "pending";
    SearchStreamingState["Streaming"] = "streaming";
    SearchStreamingState["Done"] = "done";
    SearchStreamingState["Error"] = "error";
})(SearchStreamingState || (exports.SearchStreamingState = SearchStreamingState = {}));
const defaultSearchStreamingState = () => (SearchStreamingState.Pending);
exports.defaultSearchStreamingState = defaultSearchStreamingState;
// The type of the table that is used to display the search results
var SearchTableType;
(function (SearchTableType) {
    SearchTableType["Traces"] = "traces";
    SearchTableType["Spans"] = "spans";
})(SearchTableType || (exports.SearchTableType = SearchTableType = {}));
const defaultSearchTableType = () => (SearchTableType.Traces);
exports.defaultSearchTableType = defaultSearchTableType;
// static fields are pre-set in the UI, dynamic fields are added by the user
var TraceqlSearchScope;
(function (TraceqlSearchScope) {
    TraceqlSearchScope["Intrinsic"] = "intrinsic";
    TraceqlSearchScope["Unscoped"] = "unscoped";
    TraceqlSearchScope["Resource"] = "resource";
    TraceqlSearchScope["Span"] = "span";
})(TraceqlSearchScope || (exports.TraceqlSearchScope = TraceqlSearchScope = {}));
const defaultTraceqlSearchScope = () => (TraceqlSearchScope.Intrinsic);
exports.defaultTraceqlSearchScope = defaultTraceqlSearchScope;
const defaultTraceqlFilter = () => ({
    id: "",
});
exports.defaultTraceqlFilter = defaultTraceqlFilter;
//# sourceMappingURL=types.gen.js.map