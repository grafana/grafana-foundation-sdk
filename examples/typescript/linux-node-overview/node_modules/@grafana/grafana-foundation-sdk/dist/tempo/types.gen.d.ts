export interface TempoQuery {
    refId: string;
    hide?: boolean;
    queryType?: string;
    query?: string;
    search?: string;
    serviceName?: string;
    spanName?: string;
    minDuration?: string;
    maxDuration?: string;
    serviceMapQuery?: string | string[];
    serviceMapIncludeNamespace?: boolean;
    limit?: number;
    spss?: number;
    filters: TraceqlFilter[];
    groupBy?: TraceqlFilter[];
    datasource?: any;
    tableType?: SearchTableType;
    _implementsDataqueryVariant(): void;
}
export declare const defaultTempoQuery: () => TempoQuery;
export declare enum TempoQueryType {
    Traceql = "traceql",
    TraceqlSearch = "traceqlSearch",
    Search = "search",
    ServiceMap = "serviceMap",
    Upload = "upload",
    NativeSearch = "nativeSearch",
    TraceId = "traceId",
    Clear = "clear"
}
export declare const defaultTempoQueryType: () => TempoQueryType;
export declare enum SearchStreamingState {
    Pending = "pending",
    Streaming = "streaming",
    Done = "done",
    Error = "error"
}
export declare const defaultSearchStreamingState: () => SearchStreamingState;
export declare enum SearchTableType {
    Traces = "traces",
    Spans = "spans"
}
export declare const defaultSearchTableType: () => SearchTableType;
export declare enum TraceqlSearchScope {
    Intrinsic = "intrinsic",
    Unscoped = "unscoped",
    Resource = "resource",
    Span = "span"
}
export declare const defaultTraceqlSearchScope: () => TraceqlSearchScope;
export interface TraceqlFilter {
    id: string;
    tag?: string;
    operator?: string;
    value?: string | string[];
    valueType?: string;
    scope?: TraceqlSearchScope;
}
export declare const defaultTraceqlFilter: () => TraceqlFilter;
