"use strict";
// Code generated - EDITING IS FUTILE. DO NOT EDIT.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TraceqlFilterBuilder = void 0;
const tslib_1 = require("tslib");
const tempo = tslib_1.__importStar(require("../tempo"));
class TraceqlFilterBuilder {
    constructor() {
        this.internal = tempo.defaultTraceqlFilter();
    }
    build() {
        return this.internal;
    }
    // Uniquely identify the filter, will not be used in the query generation
    id(id) {
        this.internal.id = id;
        return this;
    }
    // The tag for the search filter, for example: .http.status_code, .service.name, status
    tag(tag) {
        this.internal.tag = tag;
        return this;
    }
    // The operator that connects the tag to the value, for example: =, >, !=, =~
    operator(operator) {
        this.internal.operator = operator;
        return this;
    }
    // The value for the search filter
    value(value) {
        this.internal.value = value;
        return this;
    }
    // The type of the value, used for example to check whether we need to wrap the value in quotes when generating the query
    valueType(valueType) {
        this.internal.valueType = valueType;
        return this;
    }
    // The scope of the filter, can either be unscoped/all scopes, resource or span
    scope(scope) {
        this.internal.scope = scope;
        return this;
    }
}
exports.TraceqlFilterBuilder = TraceqlFilterBuilder;
//# sourceMappingURL=traceqlFilterBuilder.gen.js.map