export interface CloudMonitoringQuery {
    refId: string;
    hide?: boolean;
    queryType?: string;
    aliasBy?: string;
    timeSeriesList?: TimeSeriesList;
    timeSeriesQuery?: TimeSeriesQuery;
    sloQuery?: SLOQuery;
    promQLQuery?: PromQLQuery;
    datasource?: any;
    intervalMs?: number;
    _implementsDataqueryVariant(): void;
}
export declare const defaultCloudMonitoringQuery: () => CloudMonitoringQuery;
export declare enum QueryType {
    TIMESERIESLIST = "timeSeriesList",
    TIMESERIESQUERY = "timeSeriesQuery",
    SLO = "slo",
    ANNOTATION = "annotation",
    PROMQL = "promQL"
}
export declare const defaultQueryType: () => QueryType;
export interface TimeSeriesList {
    projectName: string;
    crossSeriesReducer: string;
    alignmentPeriod?: string;
    perSeriesAligner?: string;
    groupBys?: string[];
    filters?: string[];
    view?: string;
    title?: string;
    text?: string;
    secondaryCrossSeriesReducer?: string;
    secondaryAlignmentPeriod?: string;
    secondaryPerSeriesAligner?: string;
    secondaryGroupBys?: string[];
    preprocessor?: PreprocessorType;
}
export declare const defaultTimeSeriesList: () => TimeSeriesList;
export declare enum PreprocessorType {
    None = "none",
    Rate = "rate",
    Delta = "delta"
}
export declare const defaultPreprocessorType: () => PreprocessorType;
export interface TimeSeriesQuery {
    projectName: string;
    query: string;
    graphPeriod?: "disabled" | string;
}
export declare const defaultTimeSeriesQuery: () => TimeSeriesQuery;
export interface SLOQuery {
    projectName: string;
    perSeriesAligner?: string;
    alignmentPeriod?: string;
    selectorName: string;
    serviceId: string;
    serviceName: string;
    sloId: string;
    sloName: string;
    goal?: number;
    lookbackPeriod?: string;
}
export declare const defaultSLOQuery: () => SLOQuery;
export interface PromQLQuery {
    projectName: string;
    expr: string;
    step: string;
}
export declare const defaultPromQLQuery: () => PromQLQuery;
export interface MetricQuery {
    projectName: string;
    perSeriesAligner?: string;
    alignmentPeriod?: string;
    aliasBy?: string;
    editorMode: string;
    metricType: string;
    crossSeriesReducer: string;
    groupBys?: string[];
    filters?: string[];
    metricKind?: MetricKind;
    valueType?: string;
    view?: string;
    query: string;
    preprocessor?: PreprocessorType;
    graphPeriod?: "disabled" | string;
}
export declare const defaultMetricQuery: () => MetricQuery;
export declare enum MetricKind {
    METRICKINDUNSPECIFIED = "METRIC_KIND_UNSPECIFIED",
    GAUGE = "GAUGE",
    DELTA = "DELTA",
    CUMULATIVE = "CUMULATIVE"
}
export declare const defaultMetricKind: () => MetricKind;
export declare enum ValueTypes {
    VALUETYPEUNSPECIFIED = "VALUE_TYPE_UNSPECIFIED",
    BOOL = "BOOL",
    INT64 = "INT64",
    DOUBLE = "DOUBLE",
    STRING = "STRING",
    DISTRIBUTION = "DISTRIBUTION",
    MONEY = "MONEY"
}
export declare const defaultValueTypes: () => ValueTypes;
export declare enum AlignmentTypes {
    ALIGNDELTA = "ALIGN_DELTA",
    ALIGNRATE = "ALIGN_RATE",
    ALIGNINTERPOLATE = "ALIGN_INTERPOLATE",
    ALIGNNEXTOLDER = "ALIGN_NEXT_OLDER",
    ALIGNMIN = "ALIGN_MIN",
    ALIGNMAX = "ALIGN_MAX",
    ALIGNMEAN = "ALIGN_MEAN",
    ALIGNCOUNT = "ALIGN_COUNT",
    ALIGNSUM = "ALIGN_SUM",
    ALIGNSTDDEV = "ALIGN_STDDEV",
    ALIGNCOUNTTRUE = "ALIGN_COUNT_TRUE",
    ALIGNCOUNTFALSE = "ALIGN_COUNT_FALSE",
    ALIGNFRACTIONTRUE = "ALIGN_FRACTION_TRUE",
    ALIGNPERCENTILE99 = "ALIGN_PERCENTILE_99",
    ALIGNPERCENTILE95 = "ALIGN_PERCENTILE_95",
    ALIGNPERCENTILE50 = "ALIGN_PERCENTILE_50",
    ALIGNPERCENTILE05 = "ALIGN_PERCENTILE_05",
    ALIGNPERCENTCHANGE = "ALIGN_PERCENT_CHANGE",
    ALIGNNONE = "ALIGN_NONE"
}
export declare const defaultAlignmentTypes: () => AlignmentTypes;
export interface LegacyCloudMonitoringAnnotationQuery {
    projectName: string;
    metricType: string;
    refId: string;
    filters: string[];
    metricKind: MetricKind;
    valueType: string;
    title: string;
    text: string;
}
export declare const defaultLegacyCloudMonitoringAnnotationQuery: () => LegacyCloudMonitoringAnnotationQuery;
export interface Filter {
    key: string;
    operator: string;
    value: string;
    condition?: string;
}
export declare const defaultFilter: () => Filter;
export declare enum MetricFindQueryTypes {
    Projects = "projects",
    Services = "services",
    DefaultProject = "defaultProject",
    MetricTypes = "metricTypes",
    LabelKeys = "labelKeys",
    LabelValues = "labelValues",
    ResourceTypes = "resourceTypes",
    Aggregations = "aggregations",
    Aligners = "aligners",
    AlignmentPeriods = "alignmentPeriods",
    Selectors = "selectors",
    SLOServices = "sloServices",
    SLO = "slo"
}
export declare const defaultMetricFindQueryTypes: () => MetricFindQueryTypes;
