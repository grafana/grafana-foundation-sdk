"use strict";
// Code generated - EDITING IS FUTILE. DO NOT EDIT.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimePickerBuilder = void 0;
const tslib_1 = require("tslib");
const dashboard = tslib_1.__importStar(require("../dashboard"));
// Time picker configuration
// It defines the default config for the time picker and the refresh picker for the specific dashboard.
class TimePickerBuilder {
    constructor() {
        this.internal = dashboard.defaultTimePickerConfig();
    }
    build() {
        return this.internal;
    }
    // Whether timepicker is visible or not.
    hidden(hidden) {
        this.internal.hidden = hidden;
        return this;
    }
    // Interval options available in the refresh picker dropdown.
    refresh_intervals(refresh_intervals) {
        this.internal.refresh_intervals = refresh_intervals;
        return this;
    }
    // Selectable options available in the time picker dropdown. Has no effect on provisioned dashboard.
    time_options(time_options) {
        this.internal.time_options = time_options;
        return this;
    }
    // Override the now time by entering a time delay. Use this option to accommodate known delays in data aggregation to avoid null values.
    nowDelay(nowDelay) {
        this.internal.nowDelay = nowDelay;
        return this;
    }
}
exports.TimePickerBuilder = TimePickerBuilder;
//# sourceMappingURL=timePickerBuilder.gen.js.map