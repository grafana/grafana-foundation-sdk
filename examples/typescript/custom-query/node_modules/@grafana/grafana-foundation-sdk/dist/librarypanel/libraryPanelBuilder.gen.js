"use strict";
// Code generated - EDITING IS FUTILE. DO NOT EDIT.
Object.defineProperty(exports, "__esModule", { value: true });
exports.LibraryPanelBuilder = void 0;
const tslib_1 = require("tslib");
const librarypanel = tslib_1.__importStar(require("../librarypanel"));
class LibraryPanelBuilder {
    constructor() {
        this.internal = librarypanel.defaultLibraryPanel();
    }
    build() {
        return this.internal;
    }
    // Folder UID
    folderUid(folderUid) {
        this.internal.folderUid = folderUid;
        return this;
    }
    // Library element UID
    uid(uid) {
        this.internal.uid = uid;
        return this;
    }
    // Panel name (also saved in the model)
    name(name) {
        if (!(name.length >= 1)) {
            throw new Error("name.length must be >= 1");
        }
        this.internal.name = name;
        return this;
    }
    // Panel description
    description(description) {
        this.internal.description = description;
        return this;
    }
    // The panel type (from inside the model)
    type(type) {
        if (!(type.length >= 1)) {
            throw new Error("type.length must be >= 1");
        }
        this.internal.type = type;
        return this;
    }
    // Dashboard version when this was saved (zero if unknown)
    schemaVersion(schemaVersion) {
        this.internal.schemaVersion = schemaVersion;
        return this;
    }
    // panel version, incremented each time the dashboard is updated.
    version(version) {
        this.internal.version = version;
        return this;
    }
    // TODO: should be the same panel schema defined in dashboard
    // Typescript: Omit<Panel, 'gridPos' | 'id' | 'libraryPanel'>;
    model(model) {
        this.internal.model = model;
        return this;
    }
    // Object storage metadata
    meta(meta) {
        const metaResource = meta.build();
        this.internal.meta = metaResource;
        return this;
    }
}
exports.LibraryPanelBuilder = LibraryPanelBuilder;
//# sourceMappingURL=libraryPanelBuilder.gen.js.map