"use strict";
// Code generated - EDITING IS FUTILE. DO NOT EDIT.
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataqueryBuilder = void 0;
const tslib_1 = require("tslib");
const prometheus = tslib_1.__importStar(require("../prometheus"));
class DataqueryBuilder {
    constructor() {
        this.internal = prometheus.defaultDataquery();
    }
    build() {
        return this.internal;
    }
    expr(expr) {
        this.internal.expr = expr;
        return this;
    }
    instant(instant) {
        this.internal.instant = instant;
        return this;
    }
    range(range) {
        this.internal.range = range;
        return this;
    }
    exemplar(exemplar) {
        this.internal.exemplar = exemplar;
        return this;
    }
    editorMode(editorMode) {
        this.internal.editorMode = editorMode;
        return this;
    }
    format(format) {
        this.internal.format = format;
        return this;
    }
    legendFormat(legendFormat) {
        this.internal.legendFormat = legendFormat;
        return this;
    }
    intervalFactor(intervalFactor) {
        this.internal.intervalFactor = intervalFactor;
        return this;
    }
    scope(scope) {
        this.internal.scope = scope;
        return this;
    }
    refId(refId) {
        this.internal.refId = refId;
        return this;
    }
    hide(hide) {
        this.internal.hide = hide;
        return this;
    }
    queryType(queryType) {
        this.internal.queryType = queryType;
        return this;
    }
    datasource(datasource) {
        this.internal.datasource = datasource;
        return this;
    }
    // An additional lower limit for the step parameter of the Prometheus query and for the
    // `$__interval` and `$__rate_interval` variables.
    interval(interval) {
        this.internal.interval = interval;
        return this;
    }
}
exports.DataqueryBuilder = DataqueryBuilder;
//# sourceMappingURL=dataqueryBuilder.gen.js.map