"use strict";
// Code generated - EDITING IS FUTILE. DO NOT EDIT.
Object.defineProperty(exports, "__esModule", { value: true });
exports.LegacyCloudMonitoringAnnotationQueryBuilder = void 0;
const tslib_1 = require("tslib");
const googlecloudmonitoring = tslib_1.__importStar(require("../googlecloudmonitoring"));
// @deprecated Use TimeSeriesList instead. Legacy annotation query properties for migration purposes.
class LegacyCloudMonitoringAnnotationQueryBuilder {
    constructor() {
        this.internal = googlecloudmonitoring.defaultLegacyCloudMonitoringAnnotationQuery();
    }
    build() {
        return this.internal;
    }
    // GCP project to execute the query against.
    projectName(projectName) {
        this.internal.projectName = projectName;
        return this;
    }
    metricType(metricType) {
        this.internal.metricType = metricType;
        return this;
    }
    // Query refId.
    refId(refId) {
        this.internal.refId = refId;
        return this;
    }
    // Array of filters to query data by. Labels that can be filtered on are defined by the metric.
    filters(filters) {
        this.internal.filters = filters;
        return this;
    }
    metricKind(metricKind) {
        this.internal.metricKind = metricKind;
        return this;
    }
    valueType(valueType) {
        this.internal.valueType = valueType;
        return this;
    }
    // Annotation title.
    title(title) {
        this.internal.title = title;
        return this;
    }
    // Annotation text.
    text(text) {
        this.internal.text = text;
        return this;
    }
}
exports.LegacyCloudMonitoringAnnotationQueryBuilder = LegacyCloudMonitoringAnnotationQueryBuilder;
//# sourceMappingURL=legacyCloudMonitoringAnnotationQueryBuilder.gen.js.map