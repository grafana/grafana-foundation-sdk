"use strict";
// Code generated - EDITING IS FUTILE. DO NOT EDIT.
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatasourceVariableBuilder = void 0;
const tslib_1 = require("tslib");
const dashboard = tslib_1.__importStar(require("../dashboard"));
// A variable is a placeholder for a value. You can use variables in metric queries and in panel titles.
class DatasourceVariableBuilder {
    constructor(name) {
        this.internal = dashboard.defaultVariableModel();
        this.internal.name = name;
        this.internal.type = dashboard.VariableType.Datasource;
    }
    build() {
        return this.internal;
    }
    // Name of variable
    name(name) {
        this.internal.name = name;
        return this;
    }
    // Optional display name
    label(label) {
        this.internal.label = label;
        return this;
    }
    // Visibility configuration for the variable
    hide(hide) {
        this.internal.hide = hide;
        return this;
    }
    // Description of variable. It can be defined but `null`.
    description(description) {
        this.internal.description = description;
        return this;
    }
    // Query used to fetch values for a variable
    type(query) {
        this.internal.query = query;
        return this;
    }
    // Shows current selected variable text/value on the dashboard
    current(current) {
        this.internal.current = current;
        return this;
    }
    // Whether multiple values can be selected or not from variable value list
    multi(multi) {
        this.internal.multi = multi;
        return this;
    }
    // Whether all value option is available or not
    includeAll(includeAll) {
        this.internal.includeAll = includeAll;
        return this;
    }
    // Custom all value
    allValue(allValue) {
        this.internal.allValue = allValue;
        return this;
    }
    // Optional field, if you want to extract part of a series name or metric node segment.
    // Named capture groups can be used to separate the display text and value.
    regex(regex) {
        this.internal.regex = regex;
        return this;
    }
}
exports.DatasourceVariableBuilder = DatasourceVariableBuilder;
//# sourceMappingURL=datasourceVariableBuilder.gen.js.map