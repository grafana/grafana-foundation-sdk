import * as cog from '../cog';
import * as testdata from '../testdata';
export declare class DataqueryBuilder implements cog.Builder<cog.Dataquery> {
    protected readonly internal: testdata.dataquery;
    constructor();
    build(): testdata.dataquery;
    alias(alias: string): this;
    scenarioId(scenarioId: testdata.TestDataQueryType): this;
    stringInput(stringInput: string): this;
    stream(stream: cog.Builder<testdata.StreamingQuery>): this;
    pulseWave(pulseWave: cog.Builder<testdata.PulseWaveQuery>): this;
    sim(sim: cog.Builder<testdata.SimulationQuery>): this;
    csvWave(csvWave: cog.Builder<testdata.CSVWave>[]): this;
    labels(labels: string): this;
    lines(lines: number): this;
    levelColumn(levelColumn: boolean): this;
    channel(channel: string): this;
    nodes(nodes: cog.Builder<testdata.NodesQuery>): this;
    csvFileName(csvFileName: string): this;
    csvContent(csvContent: string): this;
    rawFrameContent(rawFrameContent: string): this;
    seriesCount(seriesCount: number): this;
    usa(usa: cog.Builder<testdata.USAQuery>): this;
    errorType(errorType: "server_panic" | "frontend_exception" | "frontend_observable"): this;
    spanCount(spanCount: number): this;
    points(points: (string | number)[][]): this;
    dropPercent(dropPercent: number): this;
    flamegraphDiff(flamegraphDiff: boolean): this;
    refId(refId: string): this;
    hide(hide: boolean): this;
    queryType(queryType: string): this;
    datasource(datasource: any): this;
}
