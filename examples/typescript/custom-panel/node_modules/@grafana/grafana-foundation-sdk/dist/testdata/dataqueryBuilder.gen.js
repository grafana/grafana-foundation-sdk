"use strict";
// Code generated - EDITING IS FUTILE. DO NOT EDIT.
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataqueryBuilder = void 0;
const tslib_1 = require("tslib");
const testdata = tslib_1.__importStar(require("../testdata"));
class DataqueryBuilder {
    constructor() {
        this.internal = testdata.defaultDataquery();
    }
    build() {
        return this.internal;
    }
    alias(alias) {
        this.internal.alias = alias;
        return this;
    }
    scenarioId(scenarioId) {
        this.internal.scenarioId = scenarioId;
        return this;
    }
    stringInput(stringInput) {
        this.internal.stringInput = stringInput;
        return this;
    }
    stream(stream) {
        const streamResource = stream.build();
        this.internal.stream = streamResource;
        return this;
    }
    pulseWave(pulseWave) {
        const pulseWaveResource = pulseWave.build();
        this.internal.pulseWave = pulseWaveResource;
        return this;
    }
    sim(sim) {
        const simResource = sim.build();
        this.internal.sim = simResource;
        return this;
    }
    csvWave(csvWave) {
        const csvWaveResources = csvWave.map(builder1 => builder1.build());
        this.internal.csvWave = csvWaveResources;
        return this;
    }
    labels(labels) {
        this.internal.labels = labels;
        return this;
    }
    lines(lines) {
        this.internal.lines = lines;
        return this;
    }
    levelColumn(levelColumn) {
        this.internal.levelColumn = levelColumn;
        return this;
    }
    channel(channel) {
        this.internal.channel = channel;
        return this;
    }
    nodes(nodes) {
        const nodesResource = nodes.build();
        this.internal.nodes = nodesResource;
        return this;
    }
    csvFileName(csvFileName) {
        this.internal.csvFileName = csvFileName;
        return this;
    }
    csvContent(csvContent) {
        this.internal.csvContent = csvContent;
        return this;
    }
    rawFrameContent(rawFrameContent) {
        this.internal.rawFrameContent = rawFrameContent;
        return this;
    }
    seriesCount(seriesCount) {
        this.internal.seriesCount = seriesCount;
        return this;
    }
    usa(usa) {
        const usaResource = usa.build();
        this.internal.usa = usaResource;
        return this;
    }
    errorType(errorType) {
        this.internal.errorType = errorType;
        return this;
    }
    spanCount(spanCount) {
        this.internal.spanCount = spanCount;
        return this;
    }
    points(points) {
        this.internal.points = points;
        return this;
    }
    dropPercent(dropPercent) {
        this.internal.dropPercent = dropPercent;
        return this;
    }
    flamegraphDiff(flamegraphDiff) {
        this.internal.flamegraphDiff = flamegraphDiff;
        return this;
    }
    refId(refId) {
        this.internal.refId = refId;
        return this;
    }
    hide(hide) {
        this.internal.hide = hide;
        return this;
    }
    queryType(queryType) {
        this.internal.queryType = queryType;
        return this;
    }
    datasource(datasource) {
        this.internal.datasource = datasource;
        return this;
    }
}
exports.DataqueryBuilder = DataqueryBuilder;
//# sourceMappingURL=dataqueryBuilder.gen.js.map