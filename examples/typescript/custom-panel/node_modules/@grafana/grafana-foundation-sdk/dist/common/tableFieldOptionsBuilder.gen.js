"use strict";
// Code generated - EDITING IS FUTILE. DO NOT EDIT.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableFieldOptionsBuilder = void 0;
const tslib_1 = require("tslib");
const common = tslib_1.__importStar(require("../common"));
// Field options for each field within a table (e.g 10, "The String", 64.20, etc.)
// Generally defines alignment, filtering capabilties, display options, etc.
class TableFieldOptionsBuilder {
    constructor() {
        this.internal = common.defaultTableFieldOptions();
    }
    build() {
        return this.internal;
    }
    width(width) {
        this.internal.width = width;
        return this;
    }
    minWidth(minWidth) {
        this.internal.minWidth = minWidth;
        return this;
    }
    align(align) {
        this.internal.align = align;
        return this;
    }
    // This field is deprecated in favor of using cellOptions
    displayMode(displayMode) {
        this.internal.displayMode = displayMode;
        return this;
    }
    cellOptions(cellOptions) {
        this.internal.cellOptions = cellOptions;
        return this;
    }
    // ?? default is missing or false ??
    hidden(hidden) {
        this.internal.hidden = hidden;
        return this;
    }
    inspect(inspect) {
        this.internal.inspect = inspect;
        return this;
    }
    filterable(filterable) {
        this.internal.filterable = filterable;
        return this;
    }
    // Hides any header for a column, useful for columns that show some static content or buttons.
    hideHeader(hideHeader) {
        this.internal.hideHeader = hideHeader;
        return this;
    }
}
exports.TableFieldOptionsBuilder = TableFieldOptionsBuilder;
//# sourceMappingURL=tableFieldOptionsBuilder.gen.js.map