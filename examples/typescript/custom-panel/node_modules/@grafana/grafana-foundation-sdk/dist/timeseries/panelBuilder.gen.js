"use strict";
// Code generated - EDITING IS FUTILE. DO NOT EDIT.
Object.defineProperty(exports, "__esModule", { value: true });
exports.PanelBuilder = void 0;
const tslib_1 = require("tslib");
const dashboard = tslib_1.__importStar(require("../dashboard"));
const timeseries = tslib_1.__importStar(require("../timeseries"));
// Dashboard panels are the basic visualization building blocks.
class PanelBuilder {
    constructor() {
        this.internal = dashboard.defaultPanel();
        this.internal.type = "timeseries";
    }
    build() {
        return this.internal;
    }
    // Unique identifier of the panel. Generated by Grafana when creating a new panel. It must be unique within a dashboard, but not globally.
    id(id) {
        this.internal.id = id;
        return this;
    }
    // Depends on the panel plugin. See the plugin documentation for details.
    withTarget(targets) {
        if (!this.internal.targets) {
            this.internal.targets = [];
        }
        const targetsResource = targets.build();
        this.internal.targets.push(targetsResource);
        return this;
    }
    // Panel title.
    title(title) {
        this.internal.title = title;
        return this;
    }
    // Panel description.
    description(description) {
        this.internal.description = description;
        return this;
    }
    // Whether to display the panel without a background.
    transparent(transparent) {
        this.internal.transparent = transparent;
        return this;
    }
    // The datasource used in all targets.
    datasource(datasource) {
        this.internal.datasource = datasource;
        return this;
    }
    // Panel height. The height is the number of rows from the top edge of the panel.
    height(h) {
        if (!this.internal.gridPos) {
            this.internal.gridPos = dashboard.defaultGridPos();
        }
        if (!(h > 0)) {
            throw new Error("h must be > 0");
        }
        this.internal.gridPos.h = h;
        return this;
    }
    // Panel width. The width is the number of columns from the left edge of the panel.
    span(w) {
        if (!this.internal.gridPos) {
            this.internal.gridPos = dashboard.defaultGridPos();
        }
        if (!(w > 0)) {
            throw new Error("w must be > 0");
        }
        if (!(w <= 24)) {
            throw new Error("w must be <= 24");
        }
        this.internal.gridPos.w = w;
        return this;
    }
    // Panel links.
    links(links) {
        const linksResources = links.map(builder1 => builder1.build());
        this.internal.links = linksResources;
        return this;
    }
    // Name of template variable to repeat for.
    repeat(repeat) {
        this.internal.repeat = repeat;
        return this;
    }
    // Direction to repeat in if 'repeat' is set.
    // `h` for horizontal, `v` for vertical.
    repeatDirection(repeatDirection) {
        this.internal.repeatDirection = repeatDirection;
        return this;
    }
    // Option for repeated panels that controls max items per row
    // Only relevant for horizontally repeated panels
    maxPerRow(maxPerRow) {
        this.internal.maxPerRow = maxPerRow;
        return this;
    }
    // The maximum number of data points that the panel queries are retrieving.
    maxDataPoints(maxDataPoints) {
        this.internal.maxDataPoints = maxDataPoints;
        return this;
    }
    // List of transformations that are applied to the panel data before rendering.
    // When there are multiple transformations, Grafana applies them in the order they are listed.
    // Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.
    withTransformation(transformations) {
        if (!this.internal.transformations) {
            this.internal.transformations = [];
        }
        this.internal.transformations.push(transformations);
        return this;
    }
    // The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables.
    // This value must be formatted as a number followed by a valid time
    // identifier like: "40s", "3d", etc.
    // See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options
    interval(interval) {
        this.internal.interval = interval;
        return this;
    }
    // Overrides the relative time range for individual panels,
    // which causes them to be different than what is selected in
    // the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different
    // time periods or days on the same dashboard.
    // The value is formatted as time operation like: `now-5m` (Last 5 minutes), `now/d` (the day so far),
    // `now-5d/d`(Last 5 days), `now/w` (This week so far), `now-2y/y` (Last 2 years).
    // Note: Panel time overrides have no effect when the dashboard’s time range is absolute.
    // See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options
    timeFrom(timeFrom) {
        this.internal.timeFrom = timeFrom;
        return this;
    }
    // Overrides the time range for individual panels by shifting its start and end relative to the time picker.
    // For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting `2h`.
    // Note: Panel time overrides have no effect when the dashboard’s time range is absolute.
    // See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options
    timeShift(timeShift) {
        this.internal.timeShift = timeShift;
        return this;
    }
    // Controls if the timeFrom or timeShift overrides are shown in the panel header
    hideTimeOverride(hideTimeOverride) {
        this.internal.hideTimeOverride = hideTimeOverride;
        return this;
    }
    // Dynamically load the panel
    libraryPanel(libraryPanel) {
        this.internal.libraryPanel = libraryPanel;
        return this;
    }
    // Sets panel queries cache timeout.
    cacheTimeout(cacheTimeout) {
        this.internal.cacheTimeout = cacheTimeout;
        return this;
    }
    // Overrides the data source configured time-to-live for a query cache item in milliseconds
    queryCachingTTL(queryCachingTTL) {
        this.internal.queryCachingTTL = queryCachingTTL;
        return this;
    }
    // The display value for this field.  This supports template variables blank is auto
    displayName(displayName) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.displayName = displayName;
        return this;
    }
    // Unit a field should use. The unit you select is applied to all fields except time.
    // You can use the units ID availables in Grafana or a custom unit.
    // Available units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts
    // As custom unit, you can use the following formats:
    // `suffix:<suffix>` for custom unit that should go after value.
    // `prefix:<prefix>` for custom unit that should go before value.
    // `time:<format>` For custom date time formats type for example `time:YYYY-MM-DD`.
    // `si:<base scale><unit characters>` for custom SI units. For example: `si: mF`. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.
    // `count:<unit>` for a custom count unit.
    // `currency:<unit>` for custom a currency unit.
    unit(unit) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.unit = unit;
        return this;
    }
    // Specify the number of decimals Grafana includes in the rendered value.
    // If you leave this field blank, Grafana automatically truncates the number of decimals based on the value.
    // For example 1.1234 will display as 1.12 and 100.456 will display as 100.
    // To display all decimals, set the unit to `String`.
    decimals(decimals) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.decimals = decimals;
        return this;
    }
    // The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
    min(min) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.min = min;
        return this;
    }
    // The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields.
    max(max) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.max = max;
        return this;
    }
    // Convert input values into a display string
    mappings(mappings) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.mappings = mappings;
        return this;
    }
    // Map numeric values to states
    thresholds(thresholds) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        const thresholdsResource = thresholds.build();
        this.internal.fieldConfig.defaults.thresholds = thresholdsResource;
        return this;
    }
    // Alternative to empty string
    noValue(noValue) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.noValue = noValue;
        return this;
    }
    // Overrides are the options applied to specific fields overriding the defaults.
    withOverride(overrides) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.overrides) {
            this.internal.fieldConfig.overrides = [];
        }
        this.internal.fieldConfig.overrides.push(overrides);
        return this;
    }
    timezone(timezone) {
        if (!this.internal.options) {
            this.internal.options = timeseries.defaultOptions();
        }
        this.internal.options.timezone = timezone;
        return this;
    }
    legend(legend) {
        if (!this.internal.options) {
            this.internal.options = timeseries.defaultOptions();
        }
        const legendResource = legend.build();
        this.internal.options.legend = legendResource;
        return this;
    }
    tooltip(tooltip) {
        if (!this.internal.options) {
            this.internal.options = timeseries.defaultOptions();
        }
        const tooltipResource = tooltip.build();
        this.internal.options.tooltip = tooltipResource;
        return this;
    }
    drawStyle(drawStyle) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.drawStyle = drawStyle;
        return this;
    }
    gradientMode(gradientMode) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.gradientMode = gradientMode;
        return this;
    }
    thresholdsStyle(thresholdsStyle) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        const thresholdsStyleResource = thresholdsStyle.build();
        this.internal.fieldConfig.defaults.custom.thresholdsStyle = thresholdsStyleResource;
        return this;
    }
    lineColor(lineColor) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.lineColor = lineColor;
        return this;
    }
    lineWidth(lineWidth) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.lineWidth = lineWidth;
        return this;
    }
    lineInterpolation(lineInterpolation) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.lineInterpolation = lineInterpolation;
        return this;
    }
    lineStyle(lineStyle) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        const lineStyleResource = lineStyle.build();
        this.internal.fieldConfig.defaults.custom.lineStyle = lineStyleResource;
        return this;
    }
    fillColor(fillColor) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.fillColor = fillColor;
        return this;
    }
    fillOpacity(fillOpacity) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.fillOpacity = fillOpacity;
        return this;
    }
    showPoints(showPoints) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.showPoints = showPoints;
        return this;
    }
    pointSize(pointSize) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.pointSize = pointSize;
        return this;
    }
    pointColor(pointColor) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.pointColor = pointColor;
        return this;
    }
    axisPlacement(axisPlacement) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.axisPlacement = axisPlacement;
        return this;
    }
    axisColorMode(axisColorMode) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.axisColorMode = axisColorMode;
        return this;
    }
    axisLabel(axisLabel) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.axisLabel = axisLabel;
        return this;
    }
    axisWidth(axisWidth) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.axisWidth = axisWidth;
        return this;
    }
    axisSoftMin(axisSoftMin) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.axisSoftMin = axisSoftMin;
        return this;
    }
    axisSoftMax(axisSoftMax) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.axisSoftMax = axisSoftMax;
        return this;
    }
    axisGridShow(axisGridShow) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.axisGridShow = axisGridShow;
        return this;
    }
    scaleDistribution(scaleDistribution) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        const scaleDistributionResource = scaleDistribution.build();
        this.internal.fieldConfig.defaults.custom.scaleDistribution = scaleDistributionResource;
        return this;
    }
    axisCenteredZero(axisCenteredZero) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.axisCenteredZero = axisCenteredZero;
        return this;
    }
    barAlignment(barAlignment) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.barAlignment = barAlignment;
        return this;
    }
    barWidthFactor(barWidthFactor) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.barWidthFactor = barWidthFactor;
        return this;
    }
    stacking(stacking) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        const stackingResource = stacking.build();
        this.internal.fieldConfig.defaults.custom.stacking = stackingResource;
        return this;
    }
    hideFrom(hideFrom) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        const hideFromResource = hideFrom.build();
        this.internal.fieldConfig.defaults.custom.hideFrom = hideFromResource;
        return this;
    }
    transform(transform) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.transform = transform;
        return this;
    }
    // Indicate if null values should be treated as gaps or connected.
    // When the value is a number, it represents the maximum delta in the
    // X axis that should be considered connected.  For timeseries, this is milliseconds
    spanNulls(spanNulls) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.spanNulls = spanNulls;
        return this;
    }
    fillBelowTo(fillBelowTo) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.fillBelowTo = fillBelowTo;
        return this;
    }
    pointSymbol(pointSymbol) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.pointSymbol = pointSymbol;
        return this;
    }
    axisBorderShow(axisBorderShow) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.axisBorderShow = axisBorderShow;
        return this;
    }
    barMaxWidth(barMaxWidth) {
        if (!this.internal.fieldConfig) {
            this.internal.fieldConfig = dashboard.defaultFieldConfigSource();
        }
        if (!this.internal.fieldConfig.defaults) {
            this.internal.fieldConfig.defaults = dashboard.defaultFieldConfig();
        }
        if (!this.internal.fieldConfig.defaults.custom) {
            this.internal.fieldConfig.defaults.custom = timeseries.defaultFieldConfig();
        }
        this.internal.fieldConfig.defaults.custom.barMaxWidth = barMaxWidth;
        return this;
    }
}
exports.PanelBuilder = PanelBuilder;
//# sourceMappingURL=panelBuilder.gen.js.map