export interface AzureMonitorQuery {
    refId: string;
    hide?: boolean;
    queryType?: string;
    subscription?: string;
    subscriptions?: string[];
    azureMonitor?: AzureMetricQuery;
    azureLogAnalytics?: AzureLogsQuery;
    azureResourceGraph?: AzureResourceGraphQuery;
    azureTraces?: AzureTracesQuery;
    grafanaTemplateVariableFn?: GrafanaTemplateVariableQuery;
    resourceGroup?: string;
    namespace?: string;
    resource?: string;
    datasource?: any;
    region?: string;
    _implementsDataqueryVariant(): void;
}
export declare const defaultAzureMonitorQuery: () => AzureMonitorQuery;
export declare enum AzureQueryType {
    AzureMonitor = "Azure Monitor",
    LogAnalytics = "Azure Log Analytics",
    AzureResourceGraph = "Azure Resource Graph",
    AzureTraces = "Azure Traces",
    SubscriptionsQuery = "Azure Subscriptions",
    ResourceGroupsQuery = "Azure Resource Groups",
    NamespacesQuery = "Azure Namespaces",
    ResourceNamesQuery = "Azure Resource Names",
    MetricNamesQuery = "Azure Metric Names",
    WorkspacesQuery = "Azure Workspaces",
    LocationsQuery = "Azure Regions",
    GrafanaTemplateVariableFn = "Grafana Template Variable Function"
}
export declare const defaultAzureQueryType: () => AzureQueryType;
export interface AzureMetricQuery {
    resources?: AzureMonitorResource[];
    metricNamespace?: string;
    customNamespace?: string;
    metricName?: string;
    region?: string;
    timeGrain?: string;
    aggregation?: string;
    dimensionFilters?: AzureMetricDimension[];
    top?: string;
    allowedTimeGrainsMs?: number[];
    alias?: string;
    timeGrainUnit?: string;
    dimension?: string;
    dimensionFilter?: string;
    metricDefinition?: string;
    resourceUri?: string;
    resourceGroup?: string;
    resourceName?: string;
}
export declare const defaultAzureMetricQuery: () => AzureMetricQuery;
export interface AzureLogsQuery {
    query?: string;
    resultFormat?: ResultFormat;
    resources?: string[];
    dashboardTime?: boolean;
    timeColumn?: string;
    workspace?: string;
    resource?: string;
    intersectTime?: boolean;
}
export declare const defaultAzureLogsQuery: () => AzureLogsQuery;
export interface AzureTracesQuery {
    resultFormat?: ResultFormat;
    resources?: string[];
    operationId?: string;
    traceTypes?: string[];
    filters?: AzureTracesFilter[];
    query?: string;
}
export declare const defaultAzureTracesQuery: () => AzureTracesQuery;
export interface AzureTracesFilter {
    property: string;
    operation: string;
    filters: string[];
}
export declare const defaultAzureTracesFilter: () => AzureTracesFilter;
export declare enum ResultFormat {
    Table = "table",
    TimeSeries = "time_series",
    Trace = "trace",
    Logs = "logs"
}
export declare const defaultResultFormat: () => ResultFormat;
export interface AzureResourceGraphQuery {
    query?: string;
    resultFormat?: string;
}
export declare const defaultAzureResourceGraphQuery: () => AzureResourceGraphQuery;
export interface AzureMonitorResource {
    subscription?: string;
    resourceGroup?: string;
    resourceName?: string;
    metricNamespace?: string;
    region?: string;
}
export declare const defaultAzureMonitorResource: () => AzureMonitorResource;
export interface AzureMetricDimension {
    dimension?: string;
    operator?: string;
    filters?: string[];
    filter?: string;
}
export declare const defaultAzureMetricDimension: () => AzureMetricDimension;
export declare enum GrafanaTemplateVariableQueryType {
    AppInsightsMetricNameQuery = "AppInsightsMetricNameQuery",
    AppInsightsGroupByQuery = "AppInsightsGroupByQuery",
    SubscriptionsQuery = "SubscriptionsQuery",
    ResourceGroupsQuery = "ResourceGroupsQuery",
    ResourceNamesQuery = "ResourceNamesQuery",
    MetricNamespaceQuery = "MetricNamespaceQuery",
    MetricNamesQuery = "MetricNamesQuery",
    WorkspacesQuery = "WorkspacesQuery",
    UnknownQuery = "UnknownQuery"
}
export declare const defaultGrafanaTemplateVariableQueryType: () => GrafanaTemplateVariableQueryType;
export interface BaseGrafanaTemplateVariableQuery {
    rawQuery?: string;
}
export declare const defaultBaseGrafanaTemplateVariableQuery: () => BaseGrafanaTemplateVariableQuery;
export interface UnknownQuery {
    rawQuery?: string;
    kind: "UnknownQuery";
}
export declare const defaultUnknownQuery: () => UnknownQuery;
export interface AppInsightsMetricNameQuery {
    rawQuery?: string;
    kind: "AppInsightsMetricNameQuery";
}
export declare const defaultAppInsightsMetricNameQuery: () => AppInsightsMetricNameQuery;
export interface AppInsightsGroupByQuery {
    rawQuery?: string;
    kind: "AppInsightsGroupByQuery";
    metricName: string;
}
export declare const defaultAppInsightsGroupByQuery: () => AppInsightsGroupByQuery;
export interface SubscriptionsQuery {
    rawQuery?: string;
    kind: "SubscriptionsQuery";
}
export declare const defaultSubscriptionsQuery: () => SubscriptionsQuery;
export interface ResourceGroupsQuery {
    rawQuery?: string;
    kind: "ResourceGroupsQuery";
    subscription: string;
}
export declare const defaultResourceGroupsQuery: () => ResourceGroupsQuery;
export interface ResourceNamesQuery {
    rawQuery?: string;
    kind: "ResourceNamesQuery";
    subscription: string;
    resourceGroup: string;
    metricNamespace: string;
}
export declare const defaultResourceNamesQuery: () => ResourceNamesQuery;
export interface MetricNamespaceQuery {
    rawQuery?: string;
    kind: "MetricNamespaceQuery";
    subscription: string;
    resourceGroup: string;
    metricNamespace?: string;
    resourceName?: string;
}
export declare const defaultMetricNamespaceQuery: () => MetricNamespaceQuery;
export interface MetricDefinitionsQuery {
    rawQuery?: string;
    kind: "MetricDefinitionsQuery";
    subscription: string;
    resourceGroup: string;
    metricNamespace?: string;
    resourceName?: string;
}
export declare const defaultMetricDefinitionsQuery: () => MetricDefinitionsQuery;
export interface MetricNamesQuery {
    rawQuery?: string;
    kind: "MetricNamesQuery";
    subscription: string;
    resourceGroup: string;
    resourceName: string;
    metricNamespace: string;
}
export declare const defaultMetricNamesQuery: () => MetricNamesQuery;
export interface WorkspacesQuery {
    rawQuery?: string;
    kind: "WorkspacesQuery";
    subscription: string;
}
export declare const defaultWorkspacesQuery: () => WorkspacesQuery;
export type GrafanaTemplateVariableQuery = AppInsightsMetricNameQuery | AppInsightsGroupByQuery | SubscriptionsQuery | ResourceGroupsQuery | ResourceNamesQuery | MetricNamespaceQuery | MetricDefinitionsQuery | MetricNamesQuery | WorkspacesQuery | UnknownQuery;
export declare const defaultGrafanaTemplateVariableQuery: () => GrafanaTemplateVariableQuery;
