{
  "openapi": "3.0.0",
  "info": {
    "title": "alerting",
    "version": "0.0.0",
    "x-schema-identifier": "",
    "x-schema-kind": ""
  },
  "paths": {},
  "components": {
    "schemas": {
      "Query": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "datasourceUid": {
            "type": "string",
            "description": "Grafana data source unique identifier; it should be '__expr__' for a Server Side Expression operation."
          },
          "model": {
            "type": "object",
            "additionalProperties": {},
            "description": "JSON is the raw JSON query and includes the above properties as well as custom properties."
          },
          "queryType": {
            "type": "string",
            "description": "QueryType is an optional identifier for the type of query.\nIt can be used to distinguish different types of queries."
          },
          "refId": {
            "type": "string",
            "description": "RefID is the unique identifier of the query, set by the frontend call."
          },
          "relativeTimeRange": {
            "$ref": "#/components/schemas/RelativeTimeRange",
            "description": "RelativeTimeRange is the per query start and end time\nfor requests."
          }
        }
      },
      "RuleGroup": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "folderUid": {
            "type": "string"
          },
          "interval": {
            "$ref": "#/components/schemas/Duration",
            "description": "The interval, in seconds, at which all rules in the group are evaluated.\nIf a group contains many rules, the rules are evaluated sequentially."
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rule"
            }
          },
          "title": {
            "type": "string"
          }
        }
      },
      "Duration": {
        "type": "integer",
        "description": "Duration in seconds."
      },
      "ContactPoint": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "settings",
          "type"
        ],
        "properties": {
          "disableResolveMessage": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "description": "Name is used as grouping key in the UI. Contact points with the\nsame name will be grouped in the UI."
          },
          "provenance": {
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/Json"
          },
          "type": {
            "enum": [
              "alertmanager",
              " dingding",
              " discord",
              " email",
              " googlechat",
              " kafka",
              " line",
              " opsgenie",
              " pagerduty",
              " pushover",
              " sensugo",
              " slack",
              " teams",
              " telegram",
              " threema",
              " victorops",
              " webhook",
              " wecom"
            ]
          },
          "uid": {
            "type": "string",
            "description": "UID is the unique identifier of the contact point. The UID can be\nset by the user."
          }
        },
        "description": "EmbeddedContactPoint is the contact point type that is used\nby grafanas embedded alertmanager implementation."
      },
      "Json": {
        "type": "object",
        "additionalProperties": {}
      },
      "MatchRegexps": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/Regexp"
        }
      },
      "MatchType": {
        "enum": [
          "=",
          "!=",
          "=~",
          "!~"
        ]
      },
      "Matcher": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/MatchType"
          },
          "Value": {
            "type": "string"
          }
        }
      },
      "Matchers": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Matcher"
        },
        "description": "Matchers is a slice of Matchers that is sortable, implements Stringer, and\nprovides a Matches method to match a LabelSet against all Matchers in the\nslice. Note that some users of Matchers might require it to be sorted."
      },
      "MuteTiming": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "time_intervals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeInterval"
            }
          }
        }
      },
      "NotificationTemplate": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "provenance": {
            "$ref": "#/components/schemas/Provenance"
          },
          "template": {
            "type": "string"
          }
        }
      },
      "ObjectMatchers": {
        "$ref": "#/components/schemas/Matchers",
        "description": "Matchers is a slice of Matchers that is sortable, implements Stringer, and\nprovides a Matches method to match a LabelSet against all Matchers in the\nslice. Note that some users of Matchers might require it to be sorted."
      },
      "Provenance": {
        "type": "string"
      },
      "Rule": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "condition",
          "data",
          "execErrState",
          "folderUID",
          "for",
          "noDataState",
          "orgID",
          "ruleGroup",
          "title"
        ],
        "properties": {
          "annotations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "condition": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Query"
            }
          },
          "execErrState": {
            "enum": [
              "OK",
              "Alerting",
              "Error"
            ]
          },
          "folderUID": {
            "type": "string"
          },
          "for": {
            "type": "string",
            "description": "The amount of time, in seconds, for which the rule must be breached for the rule to be considered to be Firing.\nBefore this time has elapsed, the rule is only considered to be Pending."
          },
          "id": {
            "type": "integer"
          },
          "isPaused": {
            "type": "boolean"
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "noDataState": {
            "enum": [
              "Alerting",
              "NoData",
              "OK"
            ]
          },
          "orgID": {
            "type": "integer"
          },
          "provenance": {
            "$ref": "#/components/schemas/Provenance"
          },
          "ruleGroup": {
            "type": "string",
            "minLength": 1,
            "maxLength": 190
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 190
          },
          "uid": {
            "type": "string"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Regexp": {
        "type": "object",
        "additionalProperties": {},
        "description": "A Regexp is safe for concurrent use by multiple goroutines,\nexcept for configuration methods, such as Longest."
      },
      "RelativeTimeRange": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "from": {
            "$ref": "#/components/schemas/Duration",
            "description": "A Duration represents the elapsed time between two instants\nas an int64 nanosecond count. The representation limits the\nlargest representable duration to approximately 290 years."
          },
          "to": {
            "$ref": "#/components/schemas/Duration",
            "description": "A Duration represents the elapsed time between two instants\nas an int64 nanosecond count. The representation limits the\nlargest representable duration to approximately 290 years."
          }
        },
        "description": "RelativeTimeRange is the per query start and end time\nfor requests."
      },
      "NotificationPolicy": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "continue": {
            "type": "boolean"
          },
          "group_by": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "group_interval": {
            "type": "string"
          },
          "group_wait": {
            "type": "string"
          },
          "match": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Deprecated. Remove before v1.0 release."
          },
          "match_re": {
            "$ref": "#/components/schemas/MatchRegexps"
          },
          "matchers": {
            "$ref": "#/components/schemas/Matchers",
            "description": "Matchers is a slice of Matchers that is sortable, implements Stringer, and\nprovides a Matches method to match a LabelSet against all Matchers in the\nslice. Note that some users of Matchers might require it to be sorted."
          },
          "mute_time_intervals": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "object_matchers": {
            "$ref": "#/components/schemas/ObjectMatchers",
            "description": "Matchers is a slice of Matchers that is sortable, implements Stringer, and\nprovides a Matches method to match a LabelSet against all Matchers in the\nslice. Note that some users of Matchers might require it to be sorted."
          },
          "provenance": {
            "$ref": "#/components/schemas/Provenance"
          },
          "receiver": {
            "type": "string"
          },
          "repeat_interval": {
            "type": "string"
          },
          "routes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationPolicy"
            }
          }
        },
        "description": "A Route is a node that contains definitions of how to handle alerts. This is modified\nfrom the upstream alertmanager in that it adds the ObjectMatchers property."
      },
      "TimeInterval": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "days_of_month": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "location": {
            "type": "string"
          },
          "months": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "times": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeRange"
            }
          },
          "weekdays": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "years": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "TimeInterval describes intervals of time. ContainsTime will tell you if a golang time is contained\nwithin the interval."
      },
      "TimeRange": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Redefining this to avoid an import cycle"
      }
    }
  }
}