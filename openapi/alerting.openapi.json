{
  "openapi": "3.0.0",
  "info": {
    "title": "alerting",
    "version": "0.0.0",
    "x-schema-identifier": "",
    "x-schema-kind": ""
  },
  "paths": {},
  "components": {
    "schemas": {
      "Duration": {
        "type": "integer",
        "description": "Duration in seconds."
      },
      "Json": {
        "type": "object",
        "additionalProperties": {}
      },
      "MatchRegexps": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "MatchType": {
        "type": "integer"
      },
      "Matcher": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/MatchType"
          },
          "Value": {
            "type": "string"
          }
        }
      },
      "Matchers": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Matcher"
        },
        "description": "Matchers is a slice of Matchers that is sortable, implements Stringer, and\nprovides a Matches method to match a LabelSet against all Matchers in the\nslice. Note that some users of Matchers might require it to be sorted."
      },
      "NotificationTemplate": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "provenance": {
            "$ref": "#/components/schemas/Provenance"
          },
          "template": {
            "type": "string"
          }
        }
      },
      "ObjectMatchers": {
        "$ref": "#/components/schemas/Matchers",
        "description": "Matchers is a slice of Matchers that is sortable, implements Stringer, and\nprovides a Matches method to match a LabelSet against all Matchers in the\nslice. Note that some users of Matchers might require it to be sorted."
      },
      "Provenance": {
        "type": "string"
      },
      "RelativeTimeRange": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "from": {
            "$ref": "#/components/schemas/Duration",
            "description": "RelativeTimeRange is the per query start and end time\nfor requests."
          },
          "to": {
            "$ref": "#/components/schemas/Duration",
            "description": "RelativeTimeRange is the per query start and end time\nfor requests."
          }
        },
        "description": "RelativeTimeRange is the per query start and end time\nfor requests."
      },
      "TimeInterval": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "days_of_month": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "TimeInterval describes intervals of time. ContainsTime will tell you if a golang time is contained\nwithin the interval."
          },
          "location": {
            "type": "string",
            "description": "TimeInterval describes intervals of time. ContainsTime will tell you if a golang time is contained\nwithin the interval."
          },
          "months": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "TimeInterval describes intervals of time. ContainsTime will tell you if a golang time is contained\nwithin the interval."
          },
          "times": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeRange"
            },
            "description": "TimeInterval describes intervals of time. ContainsTime will tell you if a golang time is contained\nwithin the interval."
          },
          "weekdays": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "TimeInterval describes intervals of time. ContainsTime will tell you if a golang time is contained\nwithin the interval."
          },
          "years": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "TimeInterval describes intervals of time. ContainsTime will tell you if a golang time is contained\nwithin the interval."
          }
        },
        "description": "TimeInterval describes intervals of time. ContainsTime will tell you if a golang time is contained\nwithin the interval."
      },
      "TimeRange": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "from": {
            "type": "string",
            "format": "date-time",
            "description": "Redefining this to avoid an import cycle"
          },
          "to": {
            "type": "string",
            "format": "date-time",
            "description": "Redefining this to avoid an import cycle"
          }
        },
        "description": "Redefining this to avoid an import cycle"
      },
      "RuleGroup": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "folderUid": {
            "type": "string"
          },
          "interval": {
            "$ref": "#/components/schemas/Duration",
            "description": "The interval, in seconds, at which all rules in the group are evaluated.\nIf a group contains many rules, the rules are evaluated sequentially."
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rule"
            }
          },
          "title": {
            "type": "string"
          }
        }
      },
      "Rule": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "condition",
          "data",
          "execErrState",
          "folderUID",
          "for",
          "noDataState",
          "orgID",
          "ruleGroup",
          "title"
        ],
        "properties": {
          "annotations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "condition": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Query"
            }
          },
          "execErrState": {
            "enum": [
              "OK",
              "Alerting",
              "Error"
            ]
          },
          "folderUID": {
            "type": "string"
          },
          "for": {
            "type": "string",
            "description": "The amount of time, in seconds, for which the rule must be breached for the rule to be considered to be Firing.\nBefore this time has elapsed, the rule is only considered to be Pending."
          },
          "id": {
            "type": "integer"
          },
          "isPaused": {
            "type": "boolean"
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "noDataState": {
            "enum": [
              "Alerting",
              "NoData",
              "OK"
            ]
          },
          "orgID": {
            "type": "integer"
          },
          "provenance": {
            "$ref": "#/components/schemas/Provenance"
          },
          "ruleGroup": {
            "type": "string",
            "minLength": 1,
            "maxLength": 190
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 190
          },
          "uid": {
            "type": "string",
            "minLength": 1,
            "maxLength": 40
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Query": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "datasourceUid": {
            "type": "string"
          },
          "model": {
            "type": "object",
            "additionalProperties": {}
          },
          "queryType": {
            "type": "string"
          },
          "refId": {
            "type": "string"
          },
          "relativeTimeRange": {
            "$ref": "#/components/schemas/RelativeTimeRange"
          }
        }
      },
      "ContactPoint": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "settings",
          "type"
        ],
        "properties": {
          "disableResolveMessage": {
            "type": "boolean",
            "description": "EmbeddedContactPoint is the contact point type that is used\nby grafanas embedded alertmanager implementation."
          },
          "name": {
            "type": "string",
            "description": "EmbeddedContactPoint is the contact point type that is used\nby grafanas embedded alertmanager implementation."
          },
          "provenance": {
            "type": "string",
            "description": "EmbeddedContactPoint is the contact point type that is used\nby grafanas embedded alertmanager implementation."
          },
          "settings": {
            "$ref": "#/components/schemas/Json",
            "description": "EmbeddedContactPoint is the contact point type that is used\nby grafanas embedded alertmanager implementation."
          },
          "type": {
            "enum": [
              "alertmanager",
              " dingding",
              " discord",
              " email",
              " googlechat",
              " kafka",
              " line",
              " opsgenie",
              " pagerduty",
              " pushover",
              " sensugo",
              " slack",
              " teams",
              " telegram",
              " threema",
              " victorops",
              " webhook",
              " wecom"
            ],
            "description": "EmbeddedContactPoint is the contact point type that is used\nby grafanas embedded alertmanager implementation."
          },
          "uid": {
            "type": "string",
            "minLength": 1,
            "maxLength": 40,
            "description": "EmbeddedContactPoint is the contact point type that is used\nby grafanas embedded alertmanager implementation."
          }
        },
        "description": "EmbeddedContactPoint is the contact point type that is used\nby grafanas embedded alertmanager implementation."
      },
      "NotificationPolicy": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "continue": {
            "type": "boolean",
            "description": "A Route is a node that contains definitions of how to handle alerts. This is modified\nfrom the upstream alertmanager in that it adds the ObjectMatchers property."
          },
          "group_by": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A Route is a node that contains definitions of how to handle alerts. This is modified\nfrom the upstream alertmanager in that it adds the ObjectMatchers property."
          },
          "group_interval": {
            "type": "string",
            "description": "A Route is a node that contains definitions of how to handle alerts. This is modified\nfrom the upstream alertmanager in that it adds the ObjectMatchers property."
          },
          "group_wait": {
            "type": "string",
            "description": "A Route is a node that contains definitions of how to handle alerts. This is modified\nfrom the upstream alertmanager in that it adds the ObjectMatchers property."
          },
          "match": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A Route is a node that contains definitions of how to handle alerts. This is modified\nfrom the upstream alertmanager in that it adds the ObjectMatchers property."
          },
          "match_re": {
            "$ref": "#/components/schemas/MatchRegexps",
            "description": "A Route is a node that contains definitions of how to handle alerts. This is modified\nfrom the upstream alertmanager in that it adds the ObjectMatchers property."
          },
          "matchers": {
            "$ref": "#/components/schemas/Matchers",
            "description": "A Route is a node that contains definitions of how to handle alerts. This is modified\nfrom the upstream alertmanager in that it adds the ObjectMatchers property."
          },
          "mute_time_intervals": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A Route is a node that contains definitions of how to handle alerts. This is modified\nfrom the upstream alertmanager in that it adds the ObjectMatchers property."
          },
          "object_matchers": {
            "$ref": "#/components/schemas/ObjectMatchers",
            "description": "A Route is a node that contains definitions of how to handle alerts. This is modified\nfrom the upstream alertmanager in that it adds the ObjectMatchers property."
          },
          "provenance": {
            "$ref": "#/components/schemas/Provenance",
            "description": "A Route is a node that contains definitions of how to handle alerts. This is modified\nfrom the upstream alertmanager in that it adds the ObjectMatchers property."
          },
          "receiver": {
            "type": "string",
            "description": "A Route is a node that contains definitions of how to handle alerts. This is modified\nfrom the upstream alertmanager in that it adds the ObjectMatchers property."
          },
          "repeat_interval": {
            "type": "string",
            "description": "A Route is a node that contains definitions of how to handle alerts. This is modified\nfrom the upstream alertmanager in that it adds the ObjectMatchers property."
          },
          "routes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationPolicy"
            },
            "description": "A Route is a node that contains definitions of how to handle alerts. This is modified\nfrom the upstream alertmanager in that it adds the ObjectMatchers property."
          }
        },
        "description": "A Route is a node that contains definitions of how to handle alerts. This is modified\nfrom the upstream alertmanager in that it adds the ObjectMatchers property."
      },
      "MuteTiming": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "time_intervals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeInterval"
            }
          }
        }
      }
    }
  }
}