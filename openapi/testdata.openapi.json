{
  "openapi": "3.0.0",
  "info": {
    "title": "testdata",
    "version": "0.0.0",
    "x-schema-identifier": "",
    "x-schema-kind": "composable",
    "x-schema-variant": "dataquery"
  },
  "paths": {},
  "components": {
    "schemas": {
      "CSVWave": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "labels": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "timeStep": {
            "type": "integer"
          },
          "valuesCSV": {
            "type": "string"
          }
        }
      },
      "datasource": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The datasource plugin type"
          },
          "uid": {
            "type": "string",
            "description": "Datasource UID"
          }
        }
      },
      "NodesQuery": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "count": {
            "type": "integer"
          },
          "seed": {
            "type": "integer"
          },
          "type": {
            "enum": [
              "random",
              "random edges",
              "response_medium",
              "response_small",
              "feature_showcase"
            ],
            "description": "Possible enum values:\n - `\"random\"` \n - `\"random edges\"` \n - `\"response_medium\"` \n - `\"response_small\"` \n - `\"feature_showcase\"` "
          }
        }
      },
      "PulseWaveQuery": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "offCount": {
            "type": "integer"
          },
          "offValue": {
            "type": "number"
          },
          "onCount": {
            "type": "integer"
          },
          "onValue": {
            "type": "number"
          },
          "timeStep": {
            "type": "integer"
          }
        }
      },
      "ResultAssertions": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "typeVersion"
        ],
        "properties": {
          "maxFrames": {
            "type": "integer",
            "description": "Maximum frame count"
          },
          "type": {
            "enum": [
              "",
              "timeseries-wide",
              "timeseries-long",
              "timeseries-many",
              "timeseries-multi",
              "directory-listing",
              "table",
              "numeric-wide",
              "numeric-multi",
              "numeric-long",
              "log-lines"
            ],
            "description": "Type asserts that the frame matches a known type structure.\nPossible enum values:\n - `\"\"` \n - `\"timeseries-wide\"` \n - `\"timeseries-long\"` \n - `\"timeseries-many\"` \n - `\"timeseries-multi\"` \n - `\"directory-listing\"` \n - `\"table\"` \n - `\"numeric-wide\"` \n - `\"numeric-multi\"` \n - `\"numeric-long\"` \n - `\"log-lines\"` "
          },
          "typeVersion": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "TypeVersion is the version of the Type property. Versions greater than 0.0 correspond to the dataplane\ncontract documentation https://grafana.github.io/dataplane/contract/."
          }
        }
      },
      "Key": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "tick",
          "type"
        ],
        "properties": {
          "tick": {
            "type": "number"
          },
          "type": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        }
      },
      "SimulationQuery": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "key"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": {}
          },
          "key": {
            "$ref": "#/components/schemas/Key"
          },
          "last": {
            "type": "boolean"
          },
          "stream": {
            "type": "boolean"
          }
        }
      },
      "StreamingQuery": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "noise",
          "speed",
          "spread",
          "type"
        ],
        "properties": {
          "bands": {
            "type": "integer"
          },
          "noise": {
            "type": "number"
          },
          "speed": {
            "type": "number"
          },
          "spread": {
            "type": "number"
          },
          "type": {
            "enum": [
              "fetch",
              "logs",
              "signal",
              "traces"
            ],
            "description": "Possible enum values:\n - `\"fetch\"` \n - `\"logs\"` \n - `\"signal\"` \n - `\"traces\"` "
          },
          "url": {
            "type": "string"
          }
        }
      },
      "TimeRange": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "from",
          "to"
        ],
        "properties": {
          "from": {
            "type": "string",
            "description": "From is the start time of the query.",
            "default": "now-6h"
          },
          "to": {
            "type": "string",
            "description": "To is the end time of the query.",
            "default": "now"
          }
        }
      },
      "USAQuery": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mode": {
            "type": "string"
          },
          "period": {
            "type": "string"
          },
          "states": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "dataquery": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "alias": {
            "type": "string"
          },
          "channel": {
            "type": "string",
            "description": "Used for live query"
          },
          "csvContent": {
            "type": "string"
          },
          "csvFileName": {
            "type": "string"
          },
          "csvWave": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CSVWave"
            }
          },
          "datasource": {
            "$ref": "#/components/schemas/datasource",
            "description": "The datasource"
          },
          "dropPercent": {
            "type": "number",
            "description": "Drop percentage (the chance we will lose a point 0-100)"
          },
          "errorType": {
            "enum": [
              "frontend_exception",
              "frontend_observable",
              "server_panic"
            ],
            "description": "Possible enum values:\n - `\"frontend_exception\"` \n - `\"frontend_observable\"` \n - `\"server_panic\"` "
          },
          "flamegraphDiff": {
            "type": "boolean"
          },
          "hide": {
            "type": "boolean",
            "description": "true if query is disabled (ie should not be returned to the dashboard)\nNOTE: this does not always imply that the query should not be executed since\nthe results from a hidden query may be used as the input to other queries (SSE etc)"
          },
          "intervalMs": {
            "type": "number",
            "description": "Interval is the suggested duration between time points in a time series query.\nNOTE: the values for intervalMs is not saved in the query model.  It is typically calculated\nfrom the interval required to fill a pixels in the visualization"
          },
          "labels": {
            "type": "string"
          },
          "levelColumn": {
            "type": "boolean"
          },
          "lines": {
            "type": "integer"
          },
          "max": {
            "type": "number"
          },
          "maxDataPoints": {
            "type": "integer",
            "description": "MaxDataPoints is the maximum number of data points that should be returned from a time series query.\nNOTE: the values for maxDataPoints is not saved in the query model.  It is typically calculated\nfrom the number of pixels visible in a visualization"
          },
          "min": {
            "type": "number"
          },
          "nodes": {
            "$ref": "#/components/schemas/NodesQuery"
          },
          "noise": {
            "type": "number"
          },
          "points": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": {}
              }
            }
          },
          "pulseWave": {
            "$ref": "#/components/schemas/PulseWaveQuery"
          },
          "queryType": {
            "type": "string",
            "description": "QueryType is an optional identifier for the type of query.\nIt can be used to distinguish different types of queries."
          },
          "rawFrameContent": {
            "type": "string"
          },
          "refId": {
            "type": "string",
            "description": "RefID is the unique identifier of the query, set by the frontend call."
          },
          "resultAssertions": {
            "$ref": "#/components/schemas/ResultAssertions",
            "description": "Optionally define expected query result behavior"
          },
          "scenarioId": {
            "enum": [
              "annotations",
              "arrow",
              "csv_content",
              "csv_file",
              "csv_metric_values",
              "datapoints_outside_range",
              "exponential_heatmap_bucket_data",
              "flame_graph",
              "grafana_api",
              "linear_heatmap_bucket_data",
              "live",
              "logs",
              "manual_entry",
              "no_data_points",
              "node_graph",
              "predictable_csv_wave",
              "predictable_pulse",
              "random_walk",
              "random_walk_table",
              "random_walk_with_error",
              "raw_frame",
              "server_error_500",
              "simulation",
              "slow_query",
              "streaming_client",
              "table_static",
              "trace",
              "usa",
              "variables-query"
            ],
            "description": "Possible enum values:\n - `\"annotations\"` \n - `\"arrow\"` \n - `\"csv_content\"` \n - `\"csv_file\"` \n - `\"csv_metric_values\"` \n - `\"datapoints_outside_range\"` \n - `\"exponential_heatmap_bucket_data\"` \n - `\"flame_graph\"` \n - `\"grafana_api\"` \n - `\"linear_heatmap_bucket_data\"` \n - `\"live\"` \n - `\"logs\"` \n - `\"manual_entry\"` \n - `\"no_data_points\"` \n - `\"node_graph\"` \n - `\"predictable_csv_wave\"` \n - `\"predictable_pulse\"` \n - `\"random_walk\"` \n - `\"random_walk_table\"` \n - `\"random_walk_with_error\"` \n - `\"raw_frame\"` \n - `\"server_error_500\"` \n - `\"simulation\"` \n - `\"slow_query\"` \n - `\"streaming_client\"` \n - `\"table_static\"` \n - `\"trace\"` \n - `\"usa\"` \n - `\"variables-query\"` "
          },
          "seriesCount": {
            "type": "integer"
          },
          "sim": {
            "$ref": "#/components/schemas/SimulationQuery"
          },
          "spanCount": {
            "type": "integer"
          },
          "spread": {
            "type": "number"
          },
          "startValue": {
            "type": "number"
          },
          "stream": {
            "$ref": "#/components/schemas/StreamingQuery"
          },
          "stringInput": {
            "type": "string",
            "description": "common parameter used by many query types"
          },
          "timeRange": {
            "$ref": "#/components/schemas/TimeRange",
            "description": "TimeRange represents the query range\nNOTE: unlike generic /ds/query, we can now send explicit time values in each query\nNOTE: the values for timeRange are not saved in a dashboard, they are constructed on the fly"
          },
          "usa": {
            "$ref": "#/components/schemas/USAQuery"
          },
          "withNil": {
            "type": "boolean"
          }
        }
      }
    }
  }
}