<?php

namespace Grafana\Foundation\Dashboard;

/**
 * Row panel
 * @implements \Grafana\Foundation\Cog\Builder<\Grafana\Foundation\Dashboard\RowPanel>
 */
class RowBuilder implements \Grafana\Foundation\Cog\Builder
{
    protected \Grafana\Foundation\Dashboard\RowPanel $internal;

    public function __construct(string $title)
    {
    	$this->internal = new \Grafana\Foundation\Dashboard\RowPanel();
    $this->internal->type = "row";
    $this->internal->title = $title;
    }

    /**
     * @return \Grafana\Foundation\Dashboard\RowPanel
     */
    public function build()
    {
        return $this->internal;
    }

    /**
     * Whether this row should be collapsed or not.
     */
    public function collapsed(bool $collapsed): static
    {
        $this->internal->collapsed = $collapsed;
    
        return $this;
    }
    /**
     * Row title
     */
    public function title(string $title): static
    {
        $this->internal->title = $title;
    
        return $this;
    }
    /**
     * Name of default datasource for the row
     */
    public function datasource(\Grafana\Foundation\Dashboard\DataSourceRef $datasource): static
    {
        $this->internal->datasource = $datasource;
    
        return $this;
    }
    /**
     * Row grid position
     */
    public function gridPos(\Grafana\Foundation\Dashboard\GridPos $gridPos): static
    {
        $this->internal->gridPos = $gridPos;
    
        return $this;
    }
    /**
     * Unique identifier of the panel. Generated by Grafana when creating a new panel. It must be unique within a dashboard, but not globally.
     */
    public function id(int $id): static
    {
        $this->internal->id = $id;
    
        return $this;
    }
    /**
     * List of panels in the row
     * @param \Grafana\Foundation\Cog\Builder<\Grafana\Foundation\Dashboard\Panel> $panels
     */
    public function withPanel(\Grafana\Foundation\Cog\Builder $panels): static
    {
        $panelsResource = $panels->build();
        $this->internal->panels[] = $panelsResource;
    
        return $this;
    }
    /**
     * Name of template variable to repeat for.
     */
    public function repeat(string $repeat): static
    {
        $this->internal->repeat = $repeat;
    
        return $this;
    }

}
