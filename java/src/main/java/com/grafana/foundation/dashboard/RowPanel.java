// Code generated - EDITING IS FUTILE. DO NOT EDIT.

package com.grafana.foundation.dashboard;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import java.util.List;

// Row panel
public class RowPanel {
    // The panel type
    @JsonProperty("type")
    public String type;
    // Whether this row should be collapsed or not.
    @JsonProperty("collapsed")
    public Boolean collapsed;
    // Row title
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("title")
    public String title;
    // Name of default datasource for the row
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("datasource")
    public DataSourceRef datasource;
    // Row grid position
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("gridPos")
    public GridPos gridPos;
    // Unique identifier of the panel. Generated by Grafana when creating a new panel. It must be unique within a dashboard, but not globally.
    @JsonProperty("id")
    public Integer id;
    // List of panels in the row
    @JsonSetter(nulls = Nulls.AS_EMPTY)
    @JsonProperty("panels")
    public List<Panel> panels;
    // Name of template variable to repeat for.
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("repeat")
    public String repeat;
    public RowPanel() {
        this.collapsed = false;
    }
    public RowPanel(String type,Boolean collapsed,String title,DataSourceRef datasource,GridPos gridPos,Integer id,List<Panel> panels,String repeat) {
        this.type = type;
        this.collapsed = collapsed;
        this.title = title;
        this.datasource = datasource;
        this.gridPos = gridPos;
        this.id = id;
        this.panels = panels;
        this.repeat = repeat;
    }
    
    public String toJSON() throws JsonProcessingException {
        ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
        return ow.writeValueAsString(this);
    }

}
