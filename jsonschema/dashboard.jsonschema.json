{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$ref": "#/definitions/Dashboard",
  "definitions": {
    "Dashboard": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "schemaVersion",
        "templating",
        "annotations"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique numeric identifier for the dashboard.\n`id` is internal to a specific Grafana instance. `uid` should be used to identify a dashboard across Grafana instances."
        },
        "uid": {
          "type": "string",
          "description": "Unique dashboard identifier that can be generated by anyone. string (8-40)"
        },
        "title": {
          "type": "string",
          "description": "Title of dashboard."
        },
        "description": {
          "type": "string",
          "description": "Description of dashboard."
        },
        "revision": {
          "type": "integer",
          "description": "This property should only be used in dashboards defined by plugins.  It is a quick check\nto see if the version has changed since the last time."
        },
        "gnetId": {
          "type": "string",
          "description": "ID of a dashboard imported from the https://grafana.com/grafana/dashboards/ portal"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tags associated with dashboard."
        },
        "timezone": {
          "type": "string",
          "description": "Timezone of dashboard. Accepted values are IANA TZDB zone ID or \"browser\" or \"utc\".",
          "default": "browser"
        },
        "editable": {
          "type": "boolean",
          "description": "Whether a dashboard is editable or not.",
          "default": true
        },
        "graphTooltip": {
          "$ref": "#/definitions/DashboardCursorSync",
          "description": "Configuration of dashboard cursor sync behavior.\nAccepted values are 0 (sync turned off), 1 (shared crosshair), 2 (shared crosshair and tooltip).",
          "default": 0
        },
        "time": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "from",
            "to"
          ],
          "properties": {
            "from": {
              "type": "string",
              "default": "now-6h"
            },
            "to": {
              "type": "string",
              "default": "now"
            }
          },
          "description": "Time range for dashboard.\nAccepted values are relative time strings like {from: 'now-6h', to: 'now'} or absolute time strings like {from: '2020-07-10T08:00:00.000Z', to: '2020-07-10T14:00:00.000Z'}."
        },
        "timepicker": {
          "$ref": "#/definitions/TimePickerConfig",
          "description": "Configuration of the time picker shown at the top of a dashboard."
        },
        "fiscalYearStartMonth": {
          "type": "integer",
          "exclusiveMaximum": 12,
          "description": "The month that the fiscal year starts on.  0 = January, 11 = December",
          "default": 0
        },
        "liveNow": {
          "type": "boolean",
          "description": "When set to true, the dashboard will redraw panels at an interval matching the pixel width.\nThis will keep data \"moving left\" regardless of the query refresh rate. This setting helps\navoid dashboards presenting stale live data"
        },
        "weekStart": {
          "type": "string",
          "description": "Day when the week starts. Expressed by the name of the day in lowercase, e.g. \"monday\"."
        },
        "refresh": {
          "type": "string",
          "description": "Refresh rate of dashboard. Represented via interval string, e.g. \"5s\", \"1m\", \"1h\", \"1d\"."
        },
        "schemaVersion": {
          "type": "integer",
          "description": "Version of the JSON schema, incremented each time a Grafana update brings\nchanges to said schema.",
          "default": 39
        },
        "version": {
          "type": "integer",
          "description": "Version of the dashboard, incremented each time the dashboard is updated."
        },
        "panels": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/Panel"
              },
              {
                "$ref": "#/definitions/RowPanel"
              }
            ]
          },
          "description": "List of dashboard panels"
        },
        "templating": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "list": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableModel"
              },
              "description": "List of configured template variables with their saved values along with some other metadata"
            }
          },
          "description": "Configured template variables"
        },
        "annotations": {
          "$ref": "#/definitions/AnnotationContainer",
          "description": "Contains the list of annotations that are associated with the dashboard.\nAnnotations are used to overlay event markers and overlay event tags on graphs.\nGrafana comes with a native annotation store and the ability to add annotation events directly from the graph panel or via the HTTP API.\nSee https://grafana.com/docs/grafana/latest/dashboards/build-dashboards/annotate-visualizations/"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardLink"
          },
          "description": "Links with references to other dashboards or external websites."
        },
        "snapshot": {
          "$ref": "#/definitions/Snapshot",
          "description": "Snapshot options. They are present only if the dashboard is a snapshot."
        }
      }
    },
    "AnnotationTarget": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "limit",
        "matchAny",
        "tags",
        "type"
      ],
      "properties": {
        "limit": {
          "type": "integer",
          "description": "Only required/valid for the grafana datasource...\nbut code+tests is already depending on it so hard to change"
        },
        "matchAny": {
          "type": "boolean",
          "description": "Only required/valid for the grafana datasource...\nbut code+tests is already depending on it so hard to change"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Only required/valid for the grafana datasource...\nbut code+tests is already depending on it so hard to change"
        },
        "type": {
          "type": "string",
          "description": "Only required/valid for the grafana datasource...\nbut code+tests is already depending on it so hard to change"
        }
      },
      "description": "TODO: this should be a regular DataQuery that depends on the selected dashboard\nthese match the properties of the \"grafana\" datasouce that is default in most dashboards"
    },
    "AnnotationPanelFilter": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "ids"
      ],
      "properties": {
        "exclude": {
          "type": "boolean",
          "description": "Should the specified panels be included or excluded",
          "default": false
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Panel IDs that should be included or excluded"
        }
      }
    },
    "AnnotationContainer": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationQuery"
          },
          "description": "List of annotations"
        }
      },
      "description": "Contains the list of annotations that are associated with the dashboard.\nAnnotations are used to overlay event markers and overlay event tags on graphs.\nGrafana comes with a native annotation store and the ability to add annotation events directly from the graph panel or via the HTTP API.\nSee https://grafana.com/docs/grafana/latest/dashboards/build-dashboards/annotate-visualizations/"
    },
    "AnnotationQuery": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "name",
        "datasource",
        "enable",
        "iconColor"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of annotation."
        },
        "datasource": {
          "$ref": "#/definitions/DataSourceRef",
          "description": "Datasource where the annotations data is"
        },
        "enable": {
          "type": "boolean",
          "description": "When enabled the annotation query is issued with every dashboard refresh",
          "default": true
        },
        "hide": {
          "type": "boolean",
          "description": "Annotation queries can be toggled on or off at the top of the dashboard.\nWhen hide is true, the toggle is not shown in the dashboard.",
          "default": false
        },
        "iconColor": {
          "type": "string",
          "description": "Color to use for the annotation event markers"
        },
        "filter": {
          "$ref": "#/definitions/AnnotationPanelFilter",
          "description": "Filters to apply when fetching annotations"
        },
        "target": {
          "$ref": "#/definitions/AnnotationTarget",
          "description": "TODO.. this should just be a normal query target"
        },
        "type": {
          "type": "string",
          "description": "TODO -- this should not exist here, it is based on the --grafana-- datasource"
        },
        "builtIn": {
          "type": "number",
          "description": "Set to 1 for the standard annotation query all dashboards have by default.",
          "default": 0
        }
      },
      "description": "TODO docs\nFROM: AnnotationQuery in grafana-data/src/types/annotations.ts"
    },
    "VariableModel": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "name"
      ],
      "properties": {
        "type": {
          "$ref": "#/definitions/VariableType",
          "description": "Type of variable"
        },
        "name": {
          "type": "string",
          "description": "Name of variable"
        },
        "label": {
          "type": "string",
          "description": "Optional display name"
        },
        "hide": {
          "$ref": "#/definitions/VariableHide",
          "description": "Visibility configuration for the variable"
        },
        "skipUrlSync": {
          "type": "boolean",
          "description": "Whether the variable value should be managed by URL query params or not",
          "default": false
        },
        "description": {
          "type": "string",
          "description": "Description of variable. It can be defined but `null`."
        },
        "query": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {}
              }
            }
          ],
          "description": "Query used to fetch values for a variable"
        },
        "datasource": {
          "$ref": "#/definitions/DataSourceRef",
          "description": "Data source used to fetch values for a variable. It can be defined but `null`."
        },
        "current": {
          "$ref": "#/definitions/VariableOption",
          "description": "Shows current selected variable text/value on the dashboard"
        },
        "multi": {
          "type": "boolean",
          "description": "Whether multiple values can be selected or not from variable value list",
          "default": false
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariableOption"
          },
          "description": "Options that can be selected for a variable."
        },
        "refresh": {
          "$ref": "#/definitions/VariableRefresh",
          "description": "Options to config when to refresh a variable"
        },
        "sort": {
          "$ref": "#/definitions/VariableSort",
          "description": "Options sort order"
        },
        "includeAll": {
          "type": "boolean",
          "description": "Whether all value option is available or not",
          "default": false
        },
        "allValue": {
          "type": "string",
          "description": "Custom all value"
        },
        "regex": {
          "type": "string",
          "description": "Optional field, if you want to extract part of a series name or metric node segment.\nNamed capture groups can be used to separate the display text and value."
        }
      },
      "description": "A variable is a placeholder for a value. You can use variables in metric queries and in panel titles."
    },
    "VariableOption": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "text",
        "value"
      ],
      "properties": {
        "selected": {
          "type": "boolean",
          "description": "Whether the option is selected or not"
        },
        "text": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "description": "Text to be displayed for the option"
        },
        "value": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "description": "Value of the option"
        }
      },
      "description": "Option to be selected in a variable."
    },
    "VariableRefresh": {
      "enum": [
        0,
        1,
        2
      ],
      "description": "Options to config when to refresh a variable\n`0`: Never refresh the variable\n`1`: Queries the data source every time the dashboard loads.\n`2`: Queries the data source when the dashboard time range changes."
    },
    "VariableHide": {
      "enum": [
        0,
        1,
        2
      ],
      "description": "Determine if the variable shows on dashboard\nAccepted values are 0 (show label and value), 1 (show value only), 2 (show nothing)."
    },
    "VariableSort": {
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "description": "Sort variable options\nAccepted values are:\n`0`: No sorting\n`1`: Alphabetical ASC\n`2`: Alphabetical DESC\n`3`: Numerical ASC\n`4`: Numerical DESC\n`5`: Alphabetical Case Insensitive ASC\n`6`: Alphabetical Case Insensitive DESC\n`7`: Natural ASC\n`8`: Natural DESC"
    },
    "DataSourceRef": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string",
          "description": "The plugin type-id"
        },
        "uid": {
          "type": "string",
          "description": "Specific datasource instance"
        }
      },
      "description": "Ref to a DataSource instance"
    },
    "DashboardLink": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "title",
        "type",
        "icon",
        "tooltip",
        "tags",
        "asDropdown",
        "targetBlank",
        "includeVars",
        "keepTime"
      ],
      "properties": {
        "title": {
          "type": "string",
          "description": "Title to display with the link"
        },
        "type": {
          "$ref": "#/definitions/DashboardLinkType",
          "description": "Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)"
        },
        "icon": {
          "type": "string",
          "description": "Icon name to be displayed with the link"
        },
        "tooltip": {
          "type": "string",
          "description": "Tooltip to display when the user hovers their mouse over it"
        },
        "url": {
          "type": "string",
          "description": "Link URL. Only required/valid if the type is link"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of tags to limit the linked dashboards. If empty, all dashboards will be displayed. Only valid if the type is dashboards"
        },
        "asDropdown": {
          "type": "boolean",
          "description": "If true, all dashboards links will be displayed in a dropdown. If false, all dashboards links will be displayed side by side. Only valid if the type is dashboards",
          "default": false
        },
        "targetBlank": {
          "type": "boolean",
          "description": "If true, the link will be opened in a new tab",
          "default": false
        },
        "includeVars": {
          "type": "boolean",
          "description": "If true, includes current template variables values in the link as query params",
          "default": false
        },
        "keepTime": {
          "type": "boolean",
          "description": "If true, includes current time range in the link as query params",
          "default": false
        }
      },
      "description": "Links with references to other dashboards or external resources"
    },
    "DashboardLinkType": {
      "enum": [
        "link",
        "dashboards"
      ],
      "description": "Dashboard Link type. Accepted values are dashboards (to refer to another dashboard) and link (to refer to an external resource)"
    },
    "VariableType": {
      "enum": [
        "query",
        "adhoc",
        "groupby",
        "constant",
        "datasource",
        "interval",
        "textbox",
        "custom",
        "system"
      ],
      "description": "Dashboard variable type\n`query`: Query-generated list of values such as metric names, server names, sensor IDs, data centers, and so on.\n`adhoc`: Key/value filters that are automatically added to all metric queries for a data source (Prometheus, Loki, InfluxDB, and Elasticsearch only).\n`constant`: \tDefine a hidden constant.\n`datasource`: Quickly change the data source for an entire dashboard.\n`interval`: Interval variables represent time spans.\n`textbox`: Display a free text input field with an optional default value.\n`custom`: Define the variable options manually using a comma-separated list.\n`system`: Variables defined by Grafana. See: https://grafana.com/docs/grafana/latest/dashboards/variables/add-template-variables/#global-variables"
    },
    "FieldColorModeId": {
      "enum": [
        "thresholds",
        "palette-classic",
        "palette-classic-by-name",
        "continuous-GrYlRd",
        "continuous-RdYlGr",
        "continuous-BlYlRd",
        "continuous-YlRd",
        "continuous-BlPu",
        "continuous-YlBl",
        "continuous-blues",
        "continuous-reds",
        "continuous-greens",
        "continuous-purples",
        "fixed",
        "shades"
      ],
      "description": "Color mode for a field. You can specify a single color, or select a continuous (gradient) color schemes, based on a value.\nContinuous color interpolates a color using the percentage of a value relative to min and max.\nAccepted values are:\n`thresholds`: From thresholds. Informs Grafana to take the color from the matching threshold\n`palette-classic`: Classic palette. Grafana will assign color by looking up a color in a palette by series index. Useful for Graphs and pie charts and other categorical data visualizations\n`palette-classic-by-name`: Classic palette (by name). Grafana will assign color by looking up a color in a palette by series name. Useful for Graphs and pie charts and other categorical data visualizations\n`continuous-GrYlRd`: ontinuous Green-Yellow-Red palette mode\n`continuous-RdYlGr`: Continuous Red-Yellow-Green palette mode\n`continuous-BlYlRd`: Continuous Blue-Yellow-Red palette mode\n`continuous-YlRd`: Continuous Yellow-Red palette mode\n`continuous-BlPu`: Continuous Blue-Purple palette mode\n`continuous-YlBl`: Continuous Yellow-Blue palette mode\n`continuous-blues`: Continuous Blue palette mode\n`continuous-reds`: Continuous Red palette mode\n`continuous-greens`: Continuous Green palette mode\n`continuous-purples`: Continuous Purple palette mode\n`shades`: Shades of a single color. Specify a single color, useful in an override rule.\n`fixed`: Fixed color mode. Specify a single color, useful in an override rule."
    },
    "FieldColorSeriesByMode": {
      "enum": [
        "min",
        "max",
        "last"
      ],
      "description": "Defines how to assign a series color from \"by value\" color schemes. For example for an aggregated data points like a timeseries, the color can be assigned by the min, max or last value."
    },
    "FieldColor": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "mode"
      ],
      "properties": {
        "mode": {
          "$ref": "#/definitions/FieldColorModeId",
          "description": "The main color scheme mode."
        },
        "fixedColor": {
          "type": "string",
          "description": "The fixed color value for fixed or shades color modes."
        },
        "seriesBy": {
          "$ref": "#/definitions/FieldColorSeriesByMode",
          "description": "Some visualizations need to know how to assign a series color from by value color schemes."
        }
      },
      "description": "Map a field to a color."
    },
    "GridPos": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "h",
        "w",
        "x",
        "y"
      ],
      "properties": {
        "h": {
          "type": "integer",
          "exclusiveMinimum": 0,
          "description": "Panel height. The height is the number of rows from the top edge of the panel.",
          "default": 9
        },
        "w": {
          "type": "integer",
          "exclusiveMinimum": 0,
          "maximum": 24,
          "description": "Panel width. The width is the number of columns from the left edge of the panel.",
          "default": 12
        },
        "x": {
          "type": "integer",
          "exclusiveMaximum": 24,
          "description": "Panel x. The x coordinate is the number of columns from the left edge of the grid",
          "default": 0
        },
        "y": {
          "type": "integer",
          "description": "Panel y. The y coordinate is the number of rows from the top edge of the grid",
          "default": 0
        },
        "static": {
          "type": "boolean",
          "description": "Whether the panel is fixed within the grid. If true, the panel will not be affected by other panels' interactions"
        }
      },
      "description": "Position and dimensions of a panel in the grid"
    },
    "Threshold": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "value",
        "color"
      ],
      "properties": {
        "value": {
          "type": "number",
          "description": "Value represents a specified metric for the threshold, which triggers a visual change in the dashboard when this value is met or exceeded.\nNulls currently appear here when serializing -Infinity to JSON."
        },
        "color": {
          "type": "string",
          "description": "Color represents the color of the visual change that will occur in the dashboard when the threshold value is met or exceeded."
        }
      },
      "description": "User-defined value for a metric that triggers visual changes in a panel when this value is met or exceeded\nThey are used to conditionally style and color visualizations based on query results , and can be applied to most visualizations."
    },
    "ThresholdsMode": {
      "enum": [
        "absolute",
        "percentage"
      ],
      "description": "Thresholds can either be `absolute` (specific number) or `percentage` (relative to min or max, it will be values between 0 and 1)."
    },
    "ThresholdsConfig": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "mode",
        "steps"
      ],
      "properties": {
        "mode": {
          "$ref": "#/definitions/ThresholdsMode",
          "description": "Thresholds mode."
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Threshold"
          },
          "description": "Must be sorted by 'value', first value is always -Infinity"
        }
      },
      "description": "Thresholds configuration for the panel"
    },
    "ValueMapping": {
      "anyOf": [
        {
          "$ref": "#/definitions/ValueMap"
        },
        {
          "$ref": "#/definitions/RangeMap"
        },
        {
          "$ref": "#/definitions/RegexMap"
        },
        {
          "$ref": "#/definitions/SpecialValueMap"
        }
      ],
      "description": "Allow to transform the visual representation of specific data values in a visualization, irrespective of their original units"
    },
    "MappingType": {
      "enum": [
        "value",
        "range",
        "regex",
        "special"
      ],
      "description": "Supported value mapping types\n`value`: Maps text values to a color or different display text and color. For example, you can configure a value mapping so that all instances of the value 10 appear as Perfection! rather than the number.\n`range`: Maps numerical ranges to a display text and color. For example, if a value is within a certain range, you can configure a range value mapping to display Low or High rather than the number.\n`regex`: Maps regular expressions to replacement text and a color. For example, if a value is www.example.com, you can configure a regex value mapping so that Grafana displays www and truncates the domain.\n`special`: Maps special values like Null, NaN (not a number), and boolean values like true and false to a display text and color. See SpecialValueMatch to see the list of special values. For example, you can configure a special value mapping so that null values appear as N/A."
    },
    "ValueMap": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "options"
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "value"
        },
        "options": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ValueMappingResult"
          },
          "description": "Map with \u003cvalue_to_match\u003e: ValueMappingResult. For example: { \"10\": { text: \"Perfection!\", color: \"green\" } }"
        }
      },
      "description": "Maps text values to a color or different display text and color.\nFor example, you can configure a value mapping so that all instances of the value 10 appear as Perfection! rather than the number."
    },
    "RangeMap": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "options"
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "range"
        },
        "options": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "from",
            "to",
            "result"
          ],
          "properties": {
            "from": {
              "type": "number",
              "description": "Min value of the range. It can be null which means -Infinity"
            },
            "to": {
              "type": "number",
              "description": "Max value of the range. It can be null which means +Infinity"
            },
            "result": {
              "$ref": "#/definitions/ValueMappingResult",
              "description": "Config to apply when the value is within the range"
            }
          },
          "description": "Range to match against and the result to apply when the value is within the range"
        }
      },
      "description": "Maps numerical ranges to a display text and color.\nFor example, if a value is within a certain range, you can configure a range value mapping to display Low or High rather than the number."
    },
    "RegexMap": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "options"
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "regex"
        },
        "options": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "pattern",
            "result"
          ],
          "properties": {
            "pattern": {
              "type": "string",
              "description": "Regular expression to match against"
            },
            "result": {
              "$ref": "#/definitions/ValueMappingResult",
              "description": "Config to apply when the value matches the regex"
            }
          },
          "description": "Regular expression to match against and the result to apply when the value matches the regex"
        }
      },
      "description": "Maps regular expressions to replacement text and a color.\nFor example, if a value is www.example.com, you can configure a regex value mapping so that Grafana displays www and truncates the domain."
    },
    "SpecialValueMap": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "options"
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "special"
        },
        "options": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "match",
            "result"
          ],
          "properties": {
            "match": {
              "$ref": "#/definitions/SpecialValueMatch",
              "description": "Special value to match against"
            },
            "result": {
              "$ref": "#/definitions/ValueMappingResult",
              "description": "Config to apply when the value matches the special value"
            }
          }
        }
      },
      "description": "Maps special values like Null, NaN (not a number), and boolean values like true and false to a display text and color.\nSee SpecialValueMatch to see the list of special values.\nFor example, you can configure a special value mapping so that null values appear as N/A."
    },
    "SpecialValueMatch": {
      "enum": [
        "true",
        "false",
        "null",
        "nan",
        "null+nan",
        "empty"
      ],
      "description": "Special value types supported by the `SpecialValueMap`"
    },
    "ValueMappingResult": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "text": {
          "type": "string",
          "description": "Text to display when the value matches"
        },
        "color": {
          "type": "string",
          "description": "Text to use when the value matches"
        },
        "icon": {
          "type": "string",
          "description": "Icon to display when the value matches. Only specific visualizations."
        },
        "index": {
          "type": "integer",
          "description": "Position in the mapping array. Only used internally."
        }
      },
      "description": "Result used as replacement with text and color when the value matches"
    },
    "DataTransformerConfig": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "options"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of transformer"
        },
        "disabled": {
          "type": "boolean",
          "description": "Disabled transformations are skipped"
        },
        "filter": {
          "$ref": "#/definitions/MatcherConfig",
          "description": "Optional frame matcher. When missing it will be applied to all results"
        },
        "topic": {
          "enum": [
            "series",
            "annotations",
            "alertStates"
          ],
          "description": "Where to pull DataFrames from as input to transformation"
        },
        "options": {
          "type": "object",
          "additionalProperties": {},
          "description": "Options to be passed to the transformer\nValid options depend on the transformer id"
        }
      },
      "description": "Transformations allow to manipulate data returned by a query before the system applies a visualization.\nUsing transformations you can: rename fields, join time series data, perform mathematical operations across queries,\nuse the output of one transformation as the input to another transformation, etc."
    },
    "TimePickerConfig": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "hidden": {
          "type": "boolean",
          "description": "Whether timepicker is visible or not.",
          "default": false
        },
        "refresh_intervals": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Interval options available in the refresh picker dropdown.",
          "default": [
            "5s",
            "10s",
            "30s",
            "1m",
            "5m",
            "15m",
            "30m",
            "1h",
            "2h",
            "1d"
          ]
        },
        "time_options": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Selectable options available in the time picker dropdown. Has no effect on provisioned dashboard.",
          "default": [
            "5m",
            "15m",
            "1h",
            "6h",
            "12h",
            "24h",
            "2d",
            "7d",
            "30d"
          ]
        },
        "nowDelay": {
          "type": "string",
          "description": "Override the now time by entering a time delay. Use this option to accommodate known delays in data aggregation to avoid null values."
        }
      },
      "description": "Time picker configuration\nIt defines the default config for the time picker and the refresh picker for the specific dashboard."
    },
    "DashboardCursorSync": {
      "enum": [
        0,
        1,
        2
      ],
      "description": "0 for no shared crosshair or tooltip (default).\n1 for shared crosshair.\n2 for shared crosshair AND shared tooltip."
    },
    "Snapshot": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "created",
        "expires",
        "external",
        "externalUrl",
        "originalUrl",
        "id",
        "key",
        "name",
        "orgId",
        "updated",
        "userId"
      ],
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Time when the snapshot was created"
        },
        "expires": {
          "type": "string",
          "description": "Time when the snapshot expires, default is never to expire"
        },
        "external": {
          "type": "boolean",
          "description": "Is the snapshot saved in an external grafana instance"
        },
        "externalUrl": {
          "type": "string",
          "description": "external url, if snapshot was shared in external grafana instance"
        },
        "originalUrl": {
          "type": "string",
          "description": "original url, url of the dashboard that was snapshotted"
        },
        "id": {
          "type": "integer",
          "description": "Unique identifier of the snapshot"
        },
        "key": {
          "type": "string",
          "description": "Optional, defined the unique key of the snapshot, required if external is true"
        },
        "name": {
          "type": "string",
          "description": "Optional, name of the snapshot"
        },
        "orgId": {
          "type": "integer",
          "description": "org id of the snapshot"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "description": "last time when the snapshot was updated"
        },
        "url": {
          "type": "string",
          "description": "url of the snapshot, if snapshot was shared internally"
        },
        "userId": {
          "type": "integer",
          "description": "user id of the snapshot creator"
        },
        "dashboard": {
          "$ref": "#/definitions/Dashboard"
        }
      },
      "description": "A dashboard snapshot shares an interactive dashboard publicly.\nIt is a read-only version of a dashboard, and is not editable.\nIt is possible to create a snapshot of a snapshot.\nGrafana strips away all sensitive information from the dashboard.\nSensitive information stripped: queries (metric, template,annotation) and panel links."
    },
    "Panel": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "minLength": 1,
          "description": "The panel plugin type id. This is used to find the plugin to display the panel."
        },
        "id": {
          "type": "integer",
          "description": "Unique identifier of the panel. Generated by Grafana when creating a new panel. It must be unique within a dashboard, but not globally."
        },
        "pluginVersion": {
          "type": "string",
          "description": "The version of the plugin that is used for this panel. This is used to find the plugin to display the panel and to migrate old panel configs."
        },
        "targets": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {}
          },
          "description": "Depends on the panel plugin. See the plugin documentation for details."
        },
        "title": {
          "type": "string",
          "description": "Panel title."
        },
        "description": {
          "type": "string",
          "description": "Panel description."
        },
        "transparent": {
          "type": "boolean",
          "description": "Whether to display the panel without a background.",
          "default": false
        },
        "datasource": {
          "$ref": "#/definitions/DataSourceRef",
          "description": "The datasource used in all targets."
        },
        "gridPos": {
          "$ref": "#/definitions/GridPos",
          "description": "Grid position."
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardLink"
          },
          "description": "Panel links."
        },
        "repeat": {
          "type": "string",
          "description": "Name of template variable to repeat for."
        },
        "repeatDirection": {
          "enum": [
            "h",
            "v"
          ],
          "description": "Direction to repeat in if 'repeat' is set.\n`h` for horizontal, `v` for vertical.",
          "default": "h"
        },
        "maxPerRow": {
          "type": "number",
          "description": "Option for repeated panels that controls max items per row\nOnly relevant for horizontally repeated panels"
        },
        "maxDataPoints": {
          "type": "number",
          "description": "The maximum number of data points that the panel queries are retrieving."
        },
        "transformations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataTransformerConfig"
          },
          "description": "List of transformations that are applied to the panel data before rendering.\nWhen there are multiple transformations, Grafana applies them in the order they are listed.\nEach transformation creates a result set that then passes on to the next transformation in the processing pipeline."
        },
        "interval": {
          "type": "string",
          "description": "The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables.\nThis value must be formatted as a number followed by a valid time\nidentifier like: \"40s\", \"3d\", etc.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options"
        },
        "timeFrom": {
          "type": "string",
          "description": "Overrides the relative time range for individual panels,\nwhich causes them to be different than what is selected in\nthe dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different\ntime periods or days on the same dashboard.\nThe value is formatted as time operation like: `now-5m` (Last 5 minutes), `now/d` (the day so far),\n`now-5d/d`(Last 5 days), `now/w` (This week so far), `now-2y/y` (Last 2 years).\nNote: Panel time overrides have no effect when the dashboard’s time range is absolute.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options"
        },
        "timeShift": {
          "type": "string",
          "description": "Overrides the time range for individual panels by shifting its start and end relative to the time picker.\nFor example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting `2h`.\nNote: Panel time overrides have no effect when the dashboard’s time range is absolute.\nSee: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options"
        },
        "hideTimeOverride": {
          "type": "boolean",
          "description": "Controls if the timeFrom or timeShift overrides are shown in the panel header"
        },
        "libraryPanel": {
          "$ref": "#/definitions/LibraryPanelRef",
          "description": "Dynamically load the panel"
        },
        "cacheTimeout": {
          "type": "string",
          "description": "Sets panel queries cache timeout."
        },
        "queryCachingTTL": {
          "type": "number",
          "description": "Overrides the data source configured time-to-live for a query cache item in milliseconds"
        },
        "options": {
          "type": "object",
          "additionalProperties": {},
          "description": "It depends on the panel plugin. They are specified by the Options field in panel plugin schemas."
        },
        "fieldConfig": {
          "$ref": "#/definitions/FieldConfigSource",
          "description": "Field options allow you to change how the data is displayed in your visualizations."
        }
      },
      "description": "Dashboard panels are the basic visualization building blocks."
    },
    "FieldConfigSource": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "defaults",
        "overrides"
      ],
      "properties": {
        "defaults": {
          "$ref": "#/definitions/FieldConfig",
          "description": "Defaults are the options applied to all fields."
        },
        "overrides": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "matcher",
              "properties"
            ],
            "properties": {
              "matcher": {
                "$ref": "#/definitions/MatcherConfig"
              },
              "properties": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DynamicConfigValue"
                }
              }
            }
          },
          "description": "Overrides are the options applied to specific fields overriding the defaults."
        }
      },
      "description": "The data model used in Grafana, namely the data frame, is a columnar-oriented table structure that unifies both time series and table query results.\nEach column within this structure is called a field. A field can represent a single time series or table column.\nField options allow you to change how the data is displayed in your visualizations."
    },
    "LibraryPanelRef": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "name",
        "uid"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Library panel name"
        },
        "uid": {
          "type": "string",
          "description": "Library panel uid"
        }
      },
      "description": "A library panel is a reusable panel that you can use in any dashboard.\nWhen you make a change to a library panel, that change propagates to all instances of where the panel is used.\nLibrary panels streamline reuse of panels across multiple dashboards."
    },
    "MatcherConfig": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The matcher id. This is used to find the matcher implementation from registry.",
          "default": ""
        },
        "options": {
          "type": "object",
          "additionalProperties": {},
          "description": "The matcher options. This is specific to the matcher implementation."
        }
      },
      "description": "Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation.\nIt comes with in id ( to resolve implementation from registry) and a configuration that’s specific to a particular matcher type."
    },
    "DynamicConfigValue": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "default": ""
        },
        "value": {
          "type": "object",
          "additionalProperties": {}
        }
      }
    },
    "FieldConfig": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "displayName": {
          "type": "string",
          "description": "The display value for this field.  This supports template variables blank is auto"
        },
        "displayNameFromDS": {
          "type": "string",
          "description": "This can be used by data sources that return and explicit naming structure for values and labels\nWhen this property is configured, this value is used rather than the default naming strategy."
        },
        "description": {
          "type": "string",
          "description": "Human readable field metadata"
        },
        "path": {
          "type": "string",
          "description": "An explicit path to the field in the datasource.  When the frame meta includes a path,\nThis will default to `${frame.meta.path}/${field.name}\n\nWhen defined, this value can be used as an identifier within the datasource scope, and\nmay be used to update the results"
        },
        "writeable": {
          "type": "boolean",
          "description": "True if data source can write a value to the path. Auth/authz are supported separately"
        },
        "filterable": {
          "type": "boolean",
          "description": "True if data source field supports ad-hoc filters"
        },
        "unit": {
          "type": "string",
          "description": "Unit a field should use. The unit you select is applied to all fields except time.\nYou can use the units ID availables in Grafana or a custom unit.\nAvailable units in Grafana: https://github.com/grafana/grafana/blob/main/packages/grafana-data/src/valueFormats/categories.ts\nAs custom unit, you can use the following formats:\n`suffix:\u003csuffix\u003e` for custom unit that should go after value.\n`prefix:\u003cprefix\u003e` for custom unit that should go before value.\n`time:\u003cformat\u003e` For custom date time formats type for example `time:YYYY-MM-DD`.\n`si:\u003cbase scale\u003e\u003cunit characters\u003e` for custom SI units. For example: `si: mF`. This one is a bit more advanced as you can specify both a unit and the source data scale. So if your source data is represented as milli (thousands of) something prefix the unit with that SI scale character.\n`count:\u003cunit\u003e` for a custom count unit.\n`currency:\u003cunit\u003e` for custom a currency unit."
        },
        "decimals": {
          "type": "number",
          "description": "Specify the number of decimals Grafana includes in the rendered value.\nIf you leave this field blank, Grafana automatically truncates the number of decimals based on the value.\nFor example 1.1234 will display as 1.12 and 100.456 will display as 100.\nTo display all decimals, set the unit to `String`."
        },
        "min": {
          "type": "number",
          "description": "The minimum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields."
        },
        "max": {
          "type": "number",
          "description": "The maximum value used in percentage threshold calculations. Leave blank for auto calculation based on all series and fields."
        },
        "mappings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValueMapping"
          },
          "description": "Convert input values into a display string"
        },
        "thresholds": {
          "$ref": "#/definitions/ThresholdsConfig",
          "description": "Map numeric values to states"
        },
        "color": {
          "$ref": "#/definitions/FieldColor",
          "description": "Panel color configuration"
        },
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {}
          },
          "description": "The behavior when clicking on a result"
        },
        "noValue": {
          "type": "string",
          "description": "Alternative to empty string"
        },
        "custom": {
          "type": "object",
          "additionalProperties": {},
          "description": "custom is specified by the FieldConfig field\nin panel plugin schemas."
        }
      },
      "description": "The data model used in Grafana, namely the data frame, is a columnar-oriented table structure that unifies both time series and table query results.\nEach column within this structure is called a field. A field can represent a single time series or table column.\nField options allow you to change how the data is displayed in your visualizations."
    },
    "RowPanel": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "collapsed",
        "id",
        "panels"
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "row",
          "description": "The panel type"
        },
        "collapsed": {
          "type": "boolean",
          "description": "Whether this row should be collapsed or not.",
          "default": false
        },
        "title": {
          "type": "string",
          "description": "Row title"
        },
        "datasource": {
          "$ref": "#/definitions/DataSourceRef",
          "description": "Name of default datasource for the row"
        },
        "gridPos": {
          "$ref": "#/definitions/GridPos",
          "description": "Row grid position"
        },
        "id": {
          "type": "integer",
          "description": "Unique identifier of the panel. Generated by Grafana when creating a new panel. It must be unique within a dashboard, but not globally."
        },
        "panels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Panel"
          },
          "description": "List of panels in the row"
        },
        "repeat": {
          "type": "string",
          "description": "Name of template variable to repeat for."
        }
      },
      "description": "Row panel"
    },
    "AnnotationActions": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "canAdd": {
          "type": "boolean"
        },
        "canDelete": {
          "type": "boolean"
        },
        "canEdit": {
          "type": "boolean"
        }
      }
    },
    "AnnotationPermission": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "dashboard": {
          "$ref": "#/definitions/AnnotationActions"
        },
        "organization": {
          "$ref": "#/definitions/AnnotationActions"
        }
      }
    },
    "DashboardMeta": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "annotationsPermissions": {
          "$ref": "#/definitions/AnnotationPermission"
        },
        "canAdmin": {
          "type": "boolean"
        },
        "canDelete": {
          "type": "boolean"
        },
        "canEdit": {
          "type": "boolean"
        },
        "canSave": {
          "type": "boolean"
        },
        "canStar": {
          "type": "boolean"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string"
        },
        "expires": {
          "type": "string",
          "format": "date-time"
        },
        "folderId": {
          "type": "integer"
        },
        "folderTitle": {
          "type": "string"
        },
        "folderUid": {
          "type": "string"
        },
        "folderUrl": {
          "type": "string"
        },
        "hasAcl": {
          "type": "boolean"
        },
        "isFolder": {
          "type": "boolean"
        },
        "isSnapshot": {
          "type": "boolean"
        },
        "isStarred": {
          "type": "boolean"
        },
        "provisioned": {
          "type": "boolean"
        },
        "provisionedExternalId": {
          "type": "string"
        },
        "publicDashboardEnabled": {
          "type": "boolean"
        },
        "slug": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "version": {
          "type": "integer"
        }
      }
    }
  }
}